{"ast":null,"code":"var _jsxFileName = \"/Users/jy/Desktop/heythere-chattingroom-server/chatdemo-react/src/components/Chat.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport Axios from 'axios';\nimport { useRecoilState } from 'recoil';\nimport { RoomId } from '../atoms';\nimport SockJsClient from 'react-stomp';\n\nfunction Chat() {\n  const $websocket = useRef(null);\n  const [roomId, setRoomId] = useRecoilState(RoomId);\n  const [sender, setSender] = useState('Guest');\n  const [chat, setChat] = useState('');\n  const [room, setRoom] = useState('');\n  const [msg, setMsg] = useState([]);\n  useEffect(() => {\n    if (roomId !== '') {\n      Axios.get(`http://localhost:8080/chat/room/${roomId}`).then(res => {\n        setRoom(res.data);\n      });\n    }\n\n    setSender(prompt(\"여기에 이름을 입력 \"));\n  }, [roomId]);\n\n  const recvMessage = recv => {\n    console.log(\"received\");\n    setMsg([{\n      \"type\": recv.type,\n      \"sender\": recv.type === 'ENTER' ? '[알림]' : recv.sender,\n      \"message\": recv.message\n    }, ...msg]);\n  };\n\n  const sendMessage = e => {\n    if (chat !== '') {\n      $websocket.current.sendMessage('/pub/chat/message', JSON.stringify({\n        type: 'TALK',\n        roomId: roomId,\n        sender: sender,\n        message: chat\n      }), {\n        'Content-Type': 'application/json'\n      });\n      e.target.value = '';\n    }\n  };\n\n  const onChange = e => {\n    setChat(e.target.value);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setRoomId(''),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, \"\\uB4A4\\uB85C\\uAC00\\uAE30\"), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, \"\\uBC29\\uC81C : \", room.name), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, \"\\uB098 : \", sender), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    onKeyUp: onChange,\n    placeholder: \"\\uC5EC\\uAE30\\uC5D0 \\uBA54\\uC138\\uC9C0 \\uC785\\uB825\",\n    onKeyPress: e => {\n      if (e.key === \"Enter\") {\n        sendMessage();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, \"\\uBCF4\\uB0B4\\uAE30\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, msg.map(m => /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 31\n    }\n  }, m.sender, \" - \", m.message))), /*#__PURE__*/React.createElement(SockJsClient, {\n    url: \"http://localhost:8080/ws-stomp\",\n    topics: ['/sub/chat/room/' + roomId],\n    onConnect: () => {\n      $websocket.current.sendMessage('/pub/chat/message', JSON.stringify({\n        type: 'ENTER',\n        roomId: roomId,\n        sender: sender,\n        message: ''\n      }), {\n        'Content-Type': 'application/json'\n      });\n    },\n    onMessage: msg => recvMessage(msg),\n    ref: $websocket,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default Chat;","map":{"version":3,"sources":["/Users/jy/Desktop/heythere-chattingroom-server/chatdemo-react/src/components/Chat.js"],"names":["React","useState","useEffect","useRef","Axios","useRecoilState","RoomId","SockJsClient","Chat","$websocket","roomId","setRoomId","sender","setSender","chat","setChat","room","setRoom","msg","setMsg","get","then","res","data","prompt","recvMessage","recv","console","log","type","message","sendMessage","e","current","JSON","stringify","target","value","onChange","name","key","map","m"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef} from 'react'\nimport Axios from 'axios';\nimport {useRecoilState} from 'recoil';\nimport {RoomId} from '../atoms'\nimport SockJsClient from 'react-stomp'\n\nfunction Chat(){\n    const $websocket = useRef (null);\n\n    const [roomId,setRoomId] = useRecoilState(RoomId)\n    const [sender, setSender] = useState('Guest')\n\n    const [chat, setChat] = useState('')\n    const [room, setRoom] = useState('')\n\n    const [msg, setMsg] = useState([])\n\n    useEffect(()=>{\n        if (roomId !== ''){\n            Axios.get(`http://localhost:8080/chat/room/${roomId}`)\n            .then(res=> { \n                setRoom(res.data) \n            });\n        }\n        setSender(prompt(\"여기에 이름을 입력 \"))\n\n      },[roomId]);\n    \n    const recvMessage = (recv) => {\n        console.log(\"received\")\n        setMsg([\n            {\"type\":recv.type,\"sender\":recv.type === 'ENTER'?'[알림]':recv.sender,\"message\":recv.message},\n            ...msg])\n    }\n\n    const sendMessage = (e) => {\n        if (chat !== ''){\n            $websocket.current.sendMessage (\n                '/pub/chat/message',\n                JSON.stringify({type:'TALK', roomId:roomId, sender:sender, message:chat}),\n                {'Content-Type': 'application/json'}\n            )\n            e.target.value = ''\n        }\n    }\n\n    const onChange = (e) => {\n        setChat(e.target.value);\n      };\n    \n    return (\n        <div> \n            <button onClick={()=>setRoomId('')}>뒤로가기</button>\n\n            <h1>방제 : {room.name}</h1>\n            <h2>나 : {sender}</h2>\n\n            <input type=\"text\" name=\"name\"  onKeyUp={onChange} placeholder=\"여기에 메세지 입력\" \n                onKeyPress={e => {if (e.key === \"Enter\"){\n                    sendMessage()\n\n                }}}/>\n            <button onClick={sendMessage}>보내기</button>\n\n            <ul>\n                {msg.map(m => <li>{m.sender} - {m.message}</li>)}\n            </ul>\n\n            <SockJsClient \n                url=\"http://localhost:8080/ws-stomp\" \n                topics={['/sub/chat/room/'+roomId]}\n                onConnect={()=>{\n                    $websocket.current.sendMessage (\n                        '/pub/chat/message',\n                        JSON.stringify({type:'ENTER', roomId:roomId, sender:sender, message:''}),\n                        {'Content-Type': 'application/json'}\n                    )\n                }}\n                onMessage={msg => recvMessage(msg)}\n                ref={$websocket}/> \n        </div>\n    )\n}\n\n\nexport default Chat\n\n\n"]},"metadata":{},"sourceType":"module"}