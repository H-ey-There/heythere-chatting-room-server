{"ast":null,"code":"var _jsxFileName = \"/Users/jy/Desktop/chatdemo-react/src/components/Chat.js\";\nimport React, { useState } from 'react';\nimport SockJS from 'sockjs-client';\nimport Axios from 'axios';\nimport Stomp from 'stompjs';\n\nfunction Chat(props) {\n  let chat;\n  const [msgs, setMsgs] = useState([]);\n  const [room, setRoom] = useState('');\n  let sock = new SockJS(\"http://localhost:8080/ws-stomp\");\n  let ws = Stomp.over(sock);\n  var reconnect = 0;\n  Axios.get('http://localhost:8080/chat/room/' + props.roomId).then(response => {\n    setRoom(response.data.name);\n  });\n\n  const sendMessage = function () {\n    ws.send(\"http://localhost:8080/pub/chat/message\", {}, JSON.stringify({\n      type: 'TALK',\n      roomId: props.roomId,\n      sender: props.sender,\n      message: chat\n    }));\n    chat = '';\n  };\n\n  const recvMessage = function (recv) {\n    setMsgs(...msgs, {\n      \"type\": recv.type,\n      \"sender\": recv.type == 'ENTER' ? '[알림]' : recv.sender,\n      \"message\": recv.message\n    });\n    console.log(\"msg : \", msgs);\n  };\n\n  const connect = () => {\n    // pub/sub event\n    ws.connect({}, function (frame) {\n      ws.subscribe(\"http://localhost:8080/sub/chat/room/\" + props.roomId, function (message) {\n        var recv = JSON.parse(message.body);\n        console.log(\"recv: \", recv);\n        recvMessage(recv);\n      });\n      ws.send(\"http://localhost:8080/pub/chat/message\", {}, JSON.stringify({\n        type: 'ENTER',\n        roomId: props.roomId,\n        sender: props.sender\n      }));\n      console.log(123);\n    }, function (e) {\n      if (reconnect++ <= 1) {\n        setTimeout(function () {\n          console.log(\"connection reconnect\");\n          sock = new SockJS(\"http://localhost:8080/ws-stomp\");\n          ws = Stomp.over(sock);\n          connect();\n        }, 10 * 1000);\n      }\n    });\n  };\n\n  connect();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, \"\\uBC29\\uC81C : \", room), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, msgs.map(msg => /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 33\n    }\n  }, msg.sender, \" - \", msg.message))), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    onKeyUp: e => chat = e.target.value,\n    placeholder: \"\\uBA54\\uC138\\uC9C0 \\uBCF4\\uB0B4\\uAE30\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 106\n    }\n  }, \"\\uC785\\uB825\"));\n}\n\nexport default Chat;","map":{"version":3,"sources":["/Users/jy/Desktop/chatdemo-react/src/components/Chat.js"],"names":["React","useState","SockJS","Axios","Stomp","Chat","props","chat","msgs","setMsgs","room","setRoom","sock","ws","over","reconnect","get","roomId","then","response","data","name","sendMessage","send","JSON","stringify","type","sender","message","recvMessage","recv","console","log","connect","frame","subscribe","parse","body","e","setTimeout","map","msg","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport SockJS from 'sockjs-client'\nimport Axios from 'axios';\nimport Stomp from 'stompjs'\n\nfunction Chat(props){\n    \n    let chat\n\n    const [msgs, setMsgs] = useState([])\n    const [room, setRoom] = useState('')\n\n    let sock = new SockJS(\"http://localhost:8080/ws-stomp\");\n    let ws = Stomp.over(sock);\n    var reconnect = 0;\n    \n    Axios.get('http://localhost:8080/chat/room/'+props.roomId)\n    .then(response => { \n        setRoom(response.data.name) \n    });\n    \n    const sendMessage = function() {\n        ws.send(\"http://localhost:8080/pub/chat/message\", {}, \n            JSON.stringify({type:'TALK', roomId:props.roomId, sender:props.sender, message:chat}));\n\n        chat = ''\n        \n    }\n\n    const recvMessage = function(recv) {\n        setMsgs(...msgs, {\"type\":recv.type,\n        \"sender\":recv.type=='ENTER'?'[알림]':recv.sender, \"message\":recv.message})\n\n        console.log(\"msg : \",msgs)\n    }\n\n    const connect = ()=>{\n       // pub/sub event\n    ws.connect({}, function(frame) {\n        ws.subscribe(\"http://localhost:8080/sub/chat/room/\"+props.roomId, function(message) {\n            var recv = JSON.parse(message.body);\n                console.log(\"recv: \", recv)\n                recvMessage(recv);\n        });\n        ws.send(\"http://localhost:8080/pub/chat/message\", {}, JSON.stringify({type:'ENTER', roomId: props.roomId, sender: props.sender}));\n        console.log(123)\n        }, function(e) {\n            if(reconnect++ <= 1) {\n                setTimeout(function() {\n                    console.log(\"connection reconnect\");\n                    sock = new SockJS(\"http://localhost:8080/ws-stomp\");\n                    ws = Stomp.over(sock);\n                    connect()\n                },10*1000);\n              }\n        });\n    }\n    connect()\n\n    \n\n    return (\n        <div>\n            <h1>방제 : {room}</h1>\n            <ul>\n                {msgs.map(msg=> <li>{msg.sender} - {msg.message}</li>)}\n            </ul>\n            <input type=\"text\" name=\"name\" onKeyUp={(e) => chat = e.target.value} placeholder=\"메세지 보내기\"/><button onClick={sendMessage}>입력</button>\n        </div>\n    )\n}\n\nexport default Chat\n"]},"metadata":{},"sourceType":"module"}