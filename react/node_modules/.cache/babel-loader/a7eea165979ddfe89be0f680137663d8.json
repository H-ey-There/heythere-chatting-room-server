{"ast":null,"code":"var _jsxFileName = \"/Users/jy/Desktop/chatdemo-react/src/components/Chat.js\";\nimport React, { useState, useEffect } from 'react';\nimport Axios from 'axios';\nimport SockJsClient from 'react-stomp';\n\nfunction Chat(props) {\n  let chat;\n  const [msgs, setMsgs] = useState([]);\n  const [room, setRoom] = useState('');\n  let sock = new SockJS(\"http://localhost:8080/ws-stomp\");\n  let ws = Stomp.over(sock);\n  var reconnect = 0;\n\n  const sendMessage = function () {\n    ws.send(\"http://localhost:8080/pub/chat/message\", {}, JSON.stringify({\n      type: 'TALK',\n      roomId: props.roomId,\n      sender: props.sender,\n      message: chat\n    }));\n  };\n\n  const recvMessage = function (recv) {\n    setMsgs(...msgs, {\n      \"type\": recv.type,\n      \"sender\": recv.type === 'ENTER' ? '[알림]' : recv.sender,\n      \"message\": recv.message\n    });\n    console.log(\"msg : \", msgs);\n  };\n\n  useEffect(() => {\n    Axios.get('http://localhost:8080/chat/room/' + props.roomId).then(response => {\n      setRoom(response.data.name);\n    });\n  }, []); // ws.connect({}, function(frame) {\n  //     ws.subscribe(\"http://localhost:8080/sub/chat/room/\"+props.roomId, function(message) {\n  //         var recv = JSON.parse(message.body);\n  //             recvMessage(recv);\n  //     });\n  //     ws.send(\"http://localhost:8080/pub/chat/message\", {}, JSON.stringify({type:'ENTER', roomId: props.roomId, sender: props.sender}));\n  //     }, function(e) {\n  //         if(reconnect++ <= 1) {\n  //             setTimeout(function() {\n  //                 console.log(\"connection reconnect\");\n  //                 sock = new SockJS(\"http://localhost:8080/ws-stomp\");\n  //                 ws = Stomp.over(sock);\n  //             },10*1000);\n  //           }\n  //     });\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SockJsClient, {\n    url: \"http://localhost:8080\",\n    onMessage: msg => {\n      console.log(msg);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, \"\\uBC29\\uC81C : \", room), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }, \"\\uBA54\\uC138\\uC9C0 \\uB0B4\\uC5ED\"), msgs.map(msg => /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 33\n    }\n  }, msg.sender, \" - \", msg.message))), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    onKeyUp: e => chat = e.target.value,\n    placeholder: \"\\uBA54\\uC138\\uC9C0 \\uBCF4\\uB0B4\\uAE30\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 106\n    }\n  }, \"\\uC785\\uB825\"));\n}\n\nexport default Chat;","map":{"version":3,"sources":["/Users/jy/Desktop/chatdemo-react/src/components/Chat.js"],"names":["React","useState","useEffect","Axios","SockJsClient","Chat","props","chat","msgs","setMsgs","room","setRoom","sock","SockJS","ws","Stomp","over","reconnect","sendMessage","send","JSON","stringify","type","roomId","sender","message","recvMessage","recv","console","log","get","then","response","data","name","msg","map","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Axios from 'axios';\nimport SockJsClient from 'react-stomp'\n\n\nfunction Chat(props){\n    \n    let chat\n\n    const [msgs, setMsgs] = useState([])\n    const [room, setRoom] = useState('')\n\n    let sock = new SockJS(\"http://localhost:8080/ws-stomp\");\n    let ws = Stomp.over(sock);\n    var reconnect = 0;\n    \n\n    \n    const sendMessage = function() {\n        ws.send(\"http://localhost:8080/pub/chat/message\", {}, \n            JSON.stringify({type:'TALK', roomId:props.roomId, sender:props.sender, message:chat}));\n    }\n\n    const recvMessage = function(recv) {\n        setMsgs(...msgs, {\"type\":recv.type,\n        \"sender\":recv.type==='ENTER'?'[알림]':recv.sender, \"message\":recv.message})\n\n        console.log(\"msg : \",msgs)\n    }\n\n    useEffect(() => {\n        Axios.get('http://localhost:8080/chat/room/'+props.roomId)\n        .then(response => { \n            setRoom(response.data.name) \n        });\n    },[])\n\n\n    // ws.connect({}, function(frame) {\n    //     ws.subscribe(\"http://localhost:8080/sub/chat/room/\"+props.roomId, function(message) {\n    //         var recv = JSON.parse(message.body);\n    //             recvMessage(recv);\n    //     });\n    //     ws.send(\"http://localhost:8080/pub/chat/message\", {}, JSON.stringify({type:'ENTER', roomId: props.roomId, sender: props.sender}));\n    //     }, function(e) {\n    //         if(reconnect++ <= 1) {\n    //             setTimeout(function() {\n    //                 console.log(\"connection reconnect\");\n    //                 sock = new SockJS(\"http://localhost:8080/ws-stomp\");\n    //                 ws = Stomp.over(sock);\n    //             },10*1000);\n    //           }\n    //     });\n\n    \n\n    return (\n        <div>\n            <SockJsClient\n                url=\"http://localhost:8080\"\n                onMessage={msg => {\n                    console.log(msg)\n                }}\n            />\n            <h1>방제 : {room}</h1>\n            <ul>\n                <li>메세지 내역</li>\n                {msgs.map(msg=> <li>{msg.sender} - {msg.message}</li>)}\n            </ul>\n            <input type=\"text\" name=\"name\" onKeyUp={(e) => chat = e.target.value} placeholder=\"메세지 보내기\"/><button onClick={sendMessage}>입력</button>\n        </div>\n    )\n}\n\nexport default Chat\n"]},"metadata":{},"sourceType":"module"}