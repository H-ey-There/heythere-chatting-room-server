{"ast":null,"code":"var _jsxFileName = \"/Users/jy/Desktop/heythere2/heythere-chattingroom-server/react/src/components/Chat.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport Axios from 'axios';\nimport SockJsClient from 'react-stomp';\n\nconst Chat = props => {\n  let $websocket = useRef(null);\n  const [chat, setChat] = useState('');\n  const [room, setRoom] = useState({\n    host: '',\n    users: [],\n    name: ''\n  });\n  const [sender, setSender] = useState({\n    userId: '',\n    name: ''\n  });\n  const [count, setCount] = useState(0);\n  const [msg, setMsg] = useState([]);\n\n  const updateRoom = async () => {\n    if (roomId !== '') {\n      await Axios.get(`http://localhost:8087/chat/room/${roomId}`).then(res => {\n        setRoom(res.data);\n      });\n    }\n  };\n\n  useEffect(() => {\n    updateRoom();\n  }, []);\n\n  const recvMessage = recv => {\n    updateRoom();\n\n    if (recv.type === 'QUIT') {\n      setRoomId('');\n      return;\n    }\n\n    setMsg([{\n      \"message\": recv.message\n    }, ...msg]); // setCount(recv.count);\n  };\n\n  const sendMessage = e => {\n    if (chat !== '') {\n      $websocket.current.sendMessage('/pub/chat/message', JSON.stringify({\n        type: 'TALK',\n        roomId: roomId,\n        message: `${sender.name} : ${chat}`\n      }), {\n        'Content-Type': 'application/json'\n      });\n    }\n  };\n\n  const onChange = e => {\n    setChat(e.target.value);\n  };\n\n  const exit = () => {\n    if (room.host === sender.userId) {\n      $websocket.current.sendMessage('/pub/chat/message', JSON.stringify({\n        type: 'QUIT',\n        roomId: roomId,\n        message: ''\n      }), {\n        'Content-Type': 'application/json'\n      });\n    } else {\n      $websocket.current.sendMessage('/pub/chat/message', JSON.stringify({\n        type: 'TALK',\n        roomId: roomId,\n        message: sender.name + '이 퇴장하셨습니다.'\n      }), {\n        'Content-Type': 'application/json'\n      });\n    }\n\n    setRoomId('');\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: exit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, \"\\uB4A4\\uB85C\\uAC00\\uAE30\"), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, \"\\uBC29\\uC81C : \", room.name), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, \"\\uB098 : \", sender.name), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    onKeyUp: onChange,\n    placeholder: \"\\uC5EC\\uAE30\\uC5D0 \\uBA54\\uC138\\uC9C0 \\uC785\\uB825\",\n    onKeyPress: e => {\n      if (e.key === \"Enter\") {\n        sendMessage(e);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, \"\\uBCF4\\uB0B4\\uAE30\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }, msg.map(m => /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 35\n    }\n  }, m.message)))), /*#__PURE__*/React.createElement(SockJsClient, {\n    url: \"http://localhost:8087/ws-stomp\",\n    topics: ['/sub/chat/room/' + roomId],\n    onConnect: () => {\n      $websocket.current.sendMessage('/pub/chat/message', JSON.stringify({\n        type: 'TALK',\n        roomId: roomId,\n        message: sender.name + '이 입장하였습니다.'\n      }), {\n        'Content-Type': 'application/json'\n      });\n    },\n    onMessage: msg => recvMessage(msg),\n    ref: $websocket,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default Chat;","map":{"version":3,"sources":["/Users/jy/Desktop/heythere2/heythere-chattingroom-server/react/src/components/Chat.js"],"names":["React","useState","useEffect","useRef","Axios","SockJsClient","Chat","props","$websocket","chat","setChat","room","setRoom","host","users","name","sender","setSender","userId","count","setCount","msg","setMsg","updateRoom","roomId","get","then","res","data","recvMessage","recv","type","setRoomId","message","sendMessage","e","current","JSON","stringify","onChange","target","value","exit","key","map","m"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef} from 'react'\nimport Axios from 'axios';\nimport SockJsClient from 'react-stomp'\n\nconst Chat = (props) =>{\n    let $websocket = useRef(null);\n    \n    const [chat, setChat] = useState('')\n    const [room, setRoom] = useState({\n        host: '',\n        users: [],\n        name: '',\n    })\n    const [sender, setSender] = useState(\n        {\n            userId:'',\n            name:''\n        }\n    )\n\n    const [count, setCount] = useState(0);\n\n    const [msg, setMsg] = useState([])\n\n    const updateRoom = async () =>{\n        if (roomId !== ''){\n            await Axios.get(`http://localhost:8087/chat/room/${roomId}`)\n                .then(res=> {\n                    setRoom(res.data)\n                });\n        }\n\n    }\n\n    useEffect(()=>{\n        updateRoom()\n      },[]);\n    \n    const recvMessage = (recv) => {\n        updateRoom()\n        if (recv.type === 'QUIT'){\n            setRoomId('');\n            return\n        }\n        setMsg([\n            {\n                \"message\":recv.message\n            }, ...msg])\n        // setCount(recv.count);\n    }\n\n    const sendMessage = (e) => {\n        if (chat !== ''){\n            $websocket.current.sendMessage (\n                '/pub/chat/message',\n                JSON.stringify({type:'TALK', roomId:roomId, message:`${sender.name} : ${chat}` }),\n                {'Content-Type': 'application/json'}\n            )\n        }\n    }\n\n    const onChange = (e) => {\n        setChat(e.target.value);\n      };\n\n    const exit = () => {\n        if (room.host === sender.userId) {\n            $websocket.current.sendMessage(\n                '/pub/chat/message',\n                JSON.stringify({type: 'QUIT', roomId: roomId, message: ''}),\n                {'Content-Type': 'application/json'})\n        }else {\n            $websocket.current.sendMessage(\n                '/pub/chat/message',\n                JSON.stringify({type: 'TALK', roomId: roomId, message: sender.name+'이 퇴장하셨습니다.'}),\n                {'Content-Type': 'application/json'})\n        }\n        setRoomId('')\n    }\n    \n    return (\n        <div> \n            <button onClick={exit}>뒤로가기</button>\n\n            <h1>방제 : {room.name}</h1>\n            <h2>나 : {sender.name}</h2>\n\n            <input type=\"text\" name=\"name\"  onKeyUp={onChange} placeholder=\"여기에 메세지 입력\" \n                onKeyPress={e => {if (e.key === \"Enter\"){\n                    sendMessage(e)\n                }}}/>\n            <button onClick={sendMessage}>보내기</button>\n\n            <div>\n                <ul>\n                    {msg.map(m => <li>{m.message}</li>)}\n                </ul>\n            </div>\n\n            <SockJsClient \n                url=\"http://localhost:8087/ws-stomp\"\n                topics={['/sub/chat/room/'+roomId]}\n                onConnect={()=>{\n                    $websocket.current.sendMessage (\n                        '/pub/chat/message',\n                        JSON.stringify({type:'TALK', roomId:roomId, message:sender.name+'이 입장하였습니다.'}),\n                        {'Content-Type': 'application/json'}\n                    )\n                }}\n                onMessage={msg => recvMessage(msg)}\n                ref={$websocket}/>\n        </div>\n    )\n}\n\n\nexport default Chat\n\n"]},"metadata":{},"sourceType":"module"}