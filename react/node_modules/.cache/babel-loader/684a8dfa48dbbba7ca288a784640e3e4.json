{"ast":null,"code":"var _jsxFileName = \"/Users/jy/Desktop/chatdemo-react/src/components/Chat.js\";\nimport React, { useState, useEffect } from 'react';\nimport Axios from 'axios';\nimport { useRecoilState } from 'recoil';\nimport { RoomId } from '../atoms';\nimport SockJsClient from 'react-stomp';\nimport Stomp from 'stompjs';\n\nfunction Chat() {\n  const sock = new SockJsClient(\"http://localhost:8080/ws-stomp\");\n  const stompClient = Stomp.over(sock);\n  const [roomId, setRoomId] = useRecoilState(RoomId);\n  const [sender, setSender] = useState('Guest');\n  const [chat, setChat] = useState('');\n  const [room, setRoom] = useState('');\n  const [msgs, setMsgs] = useState([]);\n\n  const connect = async () => {\n    console.log(\"init\");\n    await stompClient.connect({}, () => {\n      stompClient.subscribe(\"/sub/chat/room/\" + roomId, msg => {\n        console.log(\"msg: \", msg.body);\n        const newMessage = JSON.parse(msg.body);\n        recvMessage(newMessage);\n      });\n    });\n  };\n\n  useEffect(() => {\n    console.log(\"sock : \", sock);\n    console.log(\"client: \", stompClient);\n    connect();\n\n    if (roomId !== '') {\n      Axios.get(`http://localhost:8080/chat/room/${roomId}`).then(res => {\n        setRoom(res.data);\n      });\n    }\n\n    console.log(\"sock : \", sock);\n    console.log(\"client: \", stompClient); // stompClient.send(\"/pub/chat/message\", {}, JSON.stringify({type:'ENTER', roomId:roomId, sender:sender}));\n  }, [roomId]);\n\n  const recvMessage = recv => {\n    console.log(\"received\");\n    setMsgs([{\n      \"type\": recv.type,\n      \"sender\": recv.type === 'ENTER' ? '[알림]' : recv.sender,\n      \"message\": recv.message\n    }, ...msgs]);\n  };\n\n  const sendMessage = () => {\n    if (chat !== '') {\n      stompClient.send(\"http://localhost:8080/pub/chat/message\", {}, JSON.stringify({\n        type: 'TALK',\n        roomId: roomId,\n        sender: sender,\n        message: chat\n      }));\n    }\n  };\n\n  const onChange = e => {\n    setChat(e.target.value); // 우선 e.target 에서 name 과 value 를 추출\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setRoomId(''),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, \"\\uB4A4\\uB85C\\uAC00\\uAE30\"), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, \"\\uBC29\\uC81C : \", room.name), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, \"\\uB098 : \", sender), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    onKeyUp: onChange,\n    placeholder: \"\\uC5EC\\uAE30\\uC5D0 \\uBA54\\uC138\\uC9C0 \\uC785\\uB825\",\n    onKeyPress: e => {\n      if (e.key === \"Enter\") {\n        sendMessage();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, \"\\uBCF4\\uB0B4\\uAE30\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, msgs.map(msg => /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 34\n    }\n  }, msg.sender, \" - \", msg.message))));\n}\n\nexport default Chat;","map":{"version":3,"sources":["/Users/jy/Desktop/chatdemo-react/src/components/Chat.js"],"names":["React","useState","useEffect","Axios","useRecoilState","RoomId","SockJsClient","Stomp","Chat","sock","stompClient","over","roomId","setRoomId","sender","setSender","chat","setChat","room","setRoom","msgs","setMsgs","connect","console","log","subscribe","msg","body","newMessage","JSON","parse","recvMessage","get","then","res","data","recv","type","message","sendMessage","send","stringify","onChange","e","target","value","name","key","map"],"mappings":"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","sourcesContent":["import React, { useState, useEffect} from 'react'\nimport Axios from 'axios';\nimport {useRecoilState} from 'recoil';\nimport {RoomId} from '../atoms'\nimport SockJsClient from 'react-stomp'\nimport Stomp from 'stompjs';\n\n\n\nfunction Chat(){\n\n    const sock = new SockJsClient(\"http://localhost:8080/ws-stomp\")\n    const stompClient = Stomp.over(sock);\n\n    const [roomId,setRoomId] = useRecoilState(RoomId)\n    const [sender, setSender] = useState('Guest')\n\n    const [chat, setChat] = useState('')\n    const [room, setRoom] = useState('')\n\n    const [msgs, setMsgs] = useState([])\n\n    const connect = async () => {\n        console.log(\"init\")\n\n        await stompClient.connect({},()=>{\n            stompClient.subscribe(\"/sub/chat/room/\"+roomId,(msg)=>{\n                console.log(\"msg: \" , msg.body)\n                const newMessage = JSON.parse(msg.body) ;\n                recvMessage(newMessage);\n            });\n        });\n    }\n\n    useEffect(()=>{\n        console.log(\"sock : \",sock)\n        console.log(\"client: \",stompClient)\n        connect();\n        if (roomId !== ''){\n            Axios.get(`http://localhost:8080/chat/room/${roomId}`)\n            .then(res=> { \n                setRoom(res.data) \n            });\n        }\n        console.log(\"sock : \",sock)\n        console.log(\"client: \",stompClient)\n\n        // stompClient.send(\"/pub/chat/message\", {}, JSON.stringify({type:'ENTER', roomId:roomId, sender:sender}));\n      },[roomId]);\n    \n    const recvMessage = (recv) => {\n        console.log(\"received\")\n        setMsgs([\n            {\"type\":recv.type,\"sender\":recv.type === 'ENTER'?'[알림]':recv.sender,\"message\":recv.message},\n            ...msgs])\n    }\n\n    const sendMessage = () => {\n        if (chat !== ''){\n            stompClient.send(\n                \"http://localhost:8080/pub/chat/message\", \n                {}, \n                JSON.stringify({type:'TALK', roomId:roomId, sender:sender, message:chat})\n            );\n        }\n    }\n\n    const onChange = (e) => {\n        setChat(e.target.value); // 우선 e.target 에서 name 과 value 를 추출\n      };\n    \n    return (\n        <div> \n            <button onClick={()=>setRoomId('')}>뒤로가기</button>\n            <h1>방제 : {room.name}</h1>\n            <h2>나 : {sender}</h2>\n            <input type=\"text\" name=\"name\"  onKeyUp={onChange} placeholder=\"여기에 메세지 입력\" \n                onKeyPress={e => {if (e.key === \"Enter\"){\n                    sendMessage()\n                }}}/>\n            <button onClick={sendMessage}>보내기</button>\n            <ul>\n                {msgs.map(msg => <li>{msg.sender} - {msg.message}</li>)}\n            </ul>\n            \n        </div>\n    )\n}\n\n\nexport default Chat\n\n\n"]},"metadata":{},"sourceType":"module"}