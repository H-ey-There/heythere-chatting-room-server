{"ast":null,"code":"import _toConsumableArray from\"/Users/jy/Desktop/chatdemo-react/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _regeneratorRuntime from\"/Users/jy/Desktop/chatdemo-react/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/jy/Desktop/chatdemo-react/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/jy/Desktop/chatdemo-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import Axios from'axios';import{useRecoilState}from'recoil';import{RoomId}from'../atoms';import SockJsClient from'react-stomp';import Stomp from'stompjs';function Chat(){var sock=new SockJsClient(\"http://localhost:8080/ws-stomp\");var stompClient=Stomp.over(sock);stompClient.debug=function(){};var _useRecoilState=useRecoilState(RoomId),_useRecoilState2=_slicedToArray(_useRecoilState,2),roomId=_useRecoilState2[0],setRoomId=_useRecoilState2[1];var _useState=useState(''),_useState2=_slicedToArray(_useState,2),chat=_useState2[0],setChat=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),room=_useState4[0],setRoom=_useState4[1];var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),sender=_useState6[0],setSender=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),msgs=_useState8[0],setMsgs=_useState8[1];var connect=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:console.log(\"init\");_context.next=3;return stompClient.connect({},function(){stompClient.subscribe(\"/sub/chat/room/\".concat(roomId),function(msg){console.log(msg.body);var newMessage=JSON.parse(msg.body);recvMessage(newMessage);});});case 3:case\"end\":return _context.stop();}}},_callee);}));return function connect(){return _ref.apply(this,arguments);};}();useEffect(function(){setSender('Guest');if(roomId!==''){Axios.get(\"http://localhost:8080/chat/room/\".concat(roomId)).then(function(res){setRoom(res.data);});}connect();// stompClient.send(\"/pub/chat/message\", {}, JSON.stringify({type:'ENTER', roomId:roomId, sender:sender}));\n},[roomId]);var recvMessage=function recvMessage(recv){console.log(\"received\");setMsgs([{\"type\":recv.type,\"sender\":recv.type==='ENTER'?'[알림]':recv.sender,\"message\":recv.message}].concat(_toConsumableArray(msgs)));};var sendMessage=function sendMessage(){if(chat!==''){stompClient.send(\"/pub/chat/message\",{},JSON.stringify({type:'TALK',roomId:roomId,sender:sender,message:chat}));}};var onChange=function onChange(e){setChat(e.target.value);// 우선 e.target 에서 name 과 value 를 추출\n};return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return setRoomId('');}},\"\\uB4A4\\uB85C\\uAC00\\uAE30\"),/*#__PURE__*/React.createElement(\"h1\",null,\"\\uBC29\\uC81C : \",room.name),/*#__PURE__*/React.createElement(\"h2\",null,\"\\uB098 : \",sender),/*#__PURE__*/React.createElement(\"input\",{type:\"text\",name:\"name\",onKeyUp:onChange,placeholder:\"\\uC5EC\\uAE30\\uC5D0 \\uBA54\\uC138\\uC9C0 \\uC785\\uB825\",onKeyPress:function onKeyPress(e){if(e.key===\"Enter\"){sendMessage();}}}),/*#__PURE__*/React.createElement(\"button\",{onClick:sendMessage},\"\\uBCF4\\uB0B4\\uAE30\"),/*#__PURE__*/React.createElement(\"ul\",null,msgs.map(function(msg){return/*#__PURE__*/React.createElement(\"li\",null,msg.sender,\" - \",msg.message);})),/*#__PURE__*/React.createElement(SockJsClient,{url:\"http://localhost:8080/ws-stomp\",topic:[\"topic/roomId\"],onMassage:function onMassage(msg){console.log(msg);}}));}export default Chat;","map":{"version":3,"sources":["/Users/jy/Desktop/chatdemo-react/src/components/Chat.js"],"names":["React","useState","useEffect","Axios","useRecoilState","RoomId","SockJsClient","Stomp","Chat","sock","stompClient","over","debug","roomId","setRoomId","chat","setChat","room","setRoom","sender","setSender","msgs","setMsgs","connect","console","log","subscribe","msg","body","newMessage","JSON","parse","recvMessage","get","then","res","data","recv","type","message","sendMessage","send","stringify","onChange","e","target","value","name","key","map"],"mappings":"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","sourcesContent":["import React, { useState, useEffect} from 'react'\nimport Axios from 'axios';\nimport {useRecoilState} from 'recoil';\nimport {RoomId} from '../atoms'\nimport SockJsClient from 'react-stomp'\nimport Stomp from 'stompjs';\n\n\n\nfunction Chat(){\n\n    const sock = new SockJsClient(\"http://localhost:8080/ws-stomp\")\n    const stompClient = Stomp.over(sock);\n    stompClient.debug= () => {};\n\n    const [roomId,setRoomId] = useRecoilState(RoomId)\n    const [chat, setChat] = useState('')\n\n    const [room, setRoom] = useState('')\n    const [sender, setSender] = useState('')\n\n    const [msgs, setMsgs] = useState([])\n\n    const connect = async () => {\n        console.log(\"init\")\n        await stompClient.connect({},()=>{\n          stompClient.subscribe(`/sub/chat/room/${roomId}`,(msg)=>{\n            console.log(msg.body)\n            const newMessage = JSON.parse(msg.body) ;\n            recvMessage(newMessage);\n          });\n        });\n    }\n\n    useEffect(()=>{\n        setSender('Guest')\n        if (roomId !== ''){\n            Axios.get(`http://localhost:8080/chat/room/${roomId}`)\n            .then(res=> { \n                setRoom(res.data) \n            });\n        }\n        connect();\n        \n\n        // stompClient.send(\"/pub/chat/message\", {}, JSON.stringify({type:'ENTER', roomId:roomId, sender:sender}));\n      },[roomId]);\n    \n    const recvMessage = (recv) => {\n        console.log(\"received\")\n        setMsgs([\n            {\"type\":recv.type,\"sender\":recv.type === 'ENTER'?'[알림]':recv.sender,\"message\":recv.message},\n            ...msgs])\n    }\n\n    const sendMessage = () => {\n        if (chat !== ''){\n            stompClient.send(\n                \"/pub/chat/message\", \n                {}, \n                JSON.stringify({type:'TALK', roomId:roomId, sender:sender, message:chat})\n            );\n        }\n    }\n\n    const onChange = (e) => {\n        setChat(e.target.value); // 우선 e.target 에서 name 과 value 를 추출\n      };\n    \n    return (\n        <div> \n            <button onClick={()=>setRoomId('')}>뒤로가기</button>\n            <h1>방제 : {room.name}</h1>\n            <h2>나 : {sender}</h2>\n            <input type=\"text\" name=\"name\"  onKeyUp={onChange} placeholder=\"여기에 메세지 입력\" \n                onKeyPress={e => {if (e.key === \"Enter\"){\n                    sendMessage()\n                }}}/>\n            <button onClick={sendMessage}>보내기</button>\n            <ul>\n                {msgs.map(msg => <li>{msg.sender} - {msg.message}</li>)}\n            </ul>\n            <SockJsClient\n                url=\"http://localhost:8080/ws-stomp\"\n                topic={[\"topic/roomId\"]}\n                onMassage={msg=>{\n                    console.log(msg)\n                }}\n            />\n            \n        </div>\n    )\n}\n\n\nexport default Chat\n\n\n"]},"metadata":{},"sourceType":"module"}