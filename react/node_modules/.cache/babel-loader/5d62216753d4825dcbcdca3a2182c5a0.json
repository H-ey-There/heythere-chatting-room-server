{"ast":null,"code":"var _jsxFileName = \"/Users/jy/Desktop/chatdemo-react/src/components/Chat.js\";\nimport React, { useState } from 'react';\nimport Axios from 'axios';\n\nfunction Chat(props) {\n  const [chat, setChat] = useState('');\n\n  const onChange = e => {\n    setChat(e.target.value); // 우선 e.target 에서 name 과 value 를 추출\n  };\n\n  var sock = SockJS(\"/ws-stomp\");\n  var ws = Stomp.over(sock);\n  var reconnect = 0;\n\n  const findRoom = function () {\n    axios.get('http://localhost:8080/chat/room/' + this.roomId).then(response => {\n      this.room = response.data;\n    });\n  };\n\n  const sendMessage = function () {\n    ws.send(\"/pub/chat/message\", {}, JSON.stringify({\n      type: 'TALK',\n      roomId: this.roomId,\n      sender: this.sender,\n      message: this.message\n    }));\n    this.message = '';\n  };\n\n  const recvMessage = function (recv) {\n    this.messages.unshift({\n      \"type\": recv.type,\n      \"sender\": recv.type == 'ENTER' ? '[알림]' : recv.sender,\n      \"message\": recv.message\n    });\n  };\n\n  function connect() {\n    // pub/sub event\n    ws.connect({}, function (frame) {\n      ws.subscribe(\"/sub/chat/room/\" + vm.$data.roomId, function (message) {\n        var recv = JSON.parse(message.body);\n        vm.recvMessage(recv);\n      });\n      ws.send(\"/pub/chat/message\", {}, JSON.stringify({\n        type: 'ENTER',\n        roomId: vm.$data.roomId,\n        sender: vm.$data.sender\n      }));\n    }, function (error) {\n      if (reconnect++ <= 5) {\n        setTimeout(function () {\n          console.log(\"connection reconnect\");\n          sock = new SockJS(\"/ws-stomp\");\n          ws = Stomp.over(sock);\n          connect();\n        }, 10 * 1000);\n      }\n    });\n  }\n\n  connect();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    onKeyUp: onChange,\n    placeholder: \"\\uBA54\\uC138\\uC9C0 \\uBCF4\\uB0B4\\uAE30\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 86\n    }\n  }, \"\\uC785\\uB825\"));\n}\n\nexport default Chat;","map":{"version":3,"sources":["/Users/jy/Desktop/chatdemo-react/src/components/Chat.js"],"names":["React","useState","Axios","Chat","props","chat","setChat","onChange","e","target","value","sock","SockJS","ws","Stomp","over","reconnect","findRoom","axios","get","roomId","then","response","room","data","sendMessage","send","JSON","stringify","type","sender","message","recvMessage","recv","messages","unshift","connect","frame","subscribe","vm","$data","parse","body","error","setTimeout","console","log"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport Axios from 'axios';\n\nfunction Chat(props){\n    \n    const [chat, setChat] = useState('')\n\n    const onChange = (e) => {\n        setChat(e.target.value); // 우선 e.target 에서 name 과 value 를 추출\n      };\n    var sock = SockJS(\"/ws-stomp\");\n    var ws = Stomp.over(sock);\n    var reconnect = 0;\n    \n    const findRoom = function() {\n        axios.get('http://localhost:8080/chat/room/'+this.roomId)\n        .then(response => { this.room = response.data; });\n    }\n    const sendMessage = function() {\n        ws.send(\"/pub/chat/message\", {}, JSON.stringify({type:'TALK', roomId:this.roomId, sender:this.sender, message:this.message}));\n        this.message = '';\n    }\n\n    const recvMessage = function(recv) {\n        this.messages.unshift({\"type\":recv.type,\"sender\":recv.type=='ENTER'?'[알림]':recv.sender,\"message\":recv.message})\n    }\n\n  \n      function connect() {\n          // pub/sub event\n          ws.connect({}, function(frame) {\n              ws.subscribe(\"/sub/chat/room/\"+vm.$data.roomId, function(message) {\n                  var recv = JSON.parse(message.body);\n                  vm.recvMessage(recv);\n              });\n              ws.send(\"/pub/chat/message\", {}, JSON.stringify({type:'ENTER', roomId:vm.$data.roomId, sender:vm.$data.sender}));\n          }, function(error) {\n              if(reconnect++ <= 5) {\n                  setTimeout(function() {\n                      console.log(\"connection reconnect\");\n                      sock = new SockJS(\"/ws-stomp\");\n                      ws = Stomp.over(sock);\n                      connect();\n                  },10*1000);\n              }\n          });\n      }\n      connect();  \n\n    return (\n        <div>\n            <input type=\"text\" name=\"name\" onKeyUp={onChange} placeholder=\"메세지 보내기\"/><button>입력</button>\n        </div>\n    )\n}\n\nexport default Chat\n"]},"metadata":{},"sourceType":"module"}