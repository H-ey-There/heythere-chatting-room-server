{"ast":null,"code":"var _jsxFileName = \"/Users/jy/Desktop/chatdemo-react/src/components/Chat.js\";\nimport React, { useState, useEffect } from 'react';\nimport Axios from 'axios';\nimport { useRecoilState } from 'recoil';\nimport { RoomId } from '../atoms';\nimport SockJs from 'react-stomp';\nimport Stomp from 'stompjs';\n\nfunction Chat() {\n  let sockJS = new SockJs(\"http://localhost:8080/ws-stomp\");\n  let stompClient = Stomp.over(sockJS);\n\n  stompClient.debug = () => {};\n\n  const [roomId, setRoomId] = useRecoilState(RoomId);\n  const [chat, setChat] = useState('');\n  const [room, setRoom] = useState('');\n  const [sender, setSender] = useState('');\n  const [msgs, setMsgs] = useState([]);\n  useEffect(() => {\n    console.log(\"init\");\n    stompClient.connect({}, () => {\n      stompClient.subscribe(`/sub/chat/room/${roomId}`, msg => {\n        console.log(msg.body);\n        const newMessage = JSON.parse(msg.body);\n        recvMessage(newMessage);\n      });\n      stompClient.send(\"/pub/chat/message\", {}, JSON.stringify({\n        type: 'ENTER',\n        roomId: roomId,\n        sender: sender\n      }));\n    });\n  }, [msgs]);\n  useEffect(() => {\n    setSender('Guest'); //setSender(prompt(\"여기에 이름을 입력\"))\n  }, []);\n  useEffect(() => {\n    if (roomId !== '') {\n      Axios.get(`http://localhost:8080/chat/room/${roomId}`).then(res => {\n        console.log(\"res : \" + res.data);\n        setRoom(res.data);\n      });\n    }\n  }, [roomId]);\n\n  const recvMessage = recv => {\n    console.log(recv);\n    setMsgs([{\n      \"type\": recv.type,\n      \"sender\": recv.type === 'ENTER' ? '[알림]' : recv.sender,\n      \"message\": recv.message\n    }, ...msgs]);\n  };\n\n  const sendMessage = () => {\n    if (chat !== '') {\n      stompClient.send(\"/pub/chat/message\", {}, JSON.stringify({\n        type: 'TALK',\n        roomId: roomId,\n        sender: sender,\n        message: chat\n      }));\n    }\n  };\n\n  const onChange = e => {\n    setChat(e.target.value); // 우선 e.target 에서 name 과 value 를 추출\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setRoomId(''),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, \"\\uB4A4\\uB85C\\uAC00\\uAE30\"), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, \"\\uBC29\\uC81C : \", room.name), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, \"\\uB098 : \", sender), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    onKeyUp: onChange,\n    placeholder: \"\\uC5EC\\uAE30\\uC5D0 \\uBA54\\uC138\\uC9C0 \\uC785\\uB825\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 90\n    }\n  }, \"\\uBCF4\\uB0B4\\uAE30\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, msgs.map(msg => /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 34\n    }\n  }, msg))));\n}\n\nexport default Chat;","map":{"version":3,"sources":["/Users/jy/Desktop/chatdemo-react/src/components/Chat.js"],"names":["React","useState","useEffect","Axios","useRecoilState","RoomId","SockJs","Stomp","Chat","sockJS","stompClient","over","debug","roomId","setRoomId","chat","setChat","room","setRoom","sender","setSender","msgs","setMsgs","console","log","connect","subscribe","msg","body","newMessage","JSON","parse","recvMessage","send","stringify","type","get","then","res","data","recv","message","sendMessage","onChange","e","target","value","name","map"],"mappings":"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","sourcesContent":["import React, { useState, useEffect} from 'react'\nimport Axios from 'axios';\nimport { useRecoilState} from 'recoil';\nimport {RoomId} from '../atoms'\nimport SockJs from 'react-stomp'\nimport Stomp from 'stompjs';\n\n\nfunction Chat(){\n\n    let sockJS = new SockJs(\"http://localhost:8080/ws-stomp\");\n    let stompClient = Stomp.over(sockJS);\n    stompClient.debug= () => {};\n    \n    const [roomId,setRoomId] = useRecoilState(RoomId)\n    const [chat, setChat] = useState('')\n\n    const [room, setRoom] = useState('')\n    const [sender, setSender] = useState('')\n\n\n    const [msgs, setMsgs] = useState([])\n\n    useEffect(()=>{\n        console.log(\"init\")\n        stompClient.connect({},()=>{\n          stompClient.subscribe(`/sub/chat/room/${roomId}`,(msg)=>{\n            console.log(msg.body)\n            const newMessage = JSON.parse(msg.body) ;\n            recvMessage(newMessage);\n          });\n          stompClient.send(\"/pub/chat/message\", {}, JSON.stringify({type:'ENTER', roomId:roomId, sender:sender}));\n      });\n      },[msgs]);\n    \n    useEffect(()=>{\n        setSender('Guest')\n        //setSender(prompt(\"여기에 이름을 입력\"))\n    },[])\n\n    useEffect(() => {\n        if (roomId !== ''){\n            Axios.get(`http://localhost:8080/chat/room/${roomId}`)\n            .then(res=> { \n                console.log(\"res : \" + res.data)\n                setRoom(res.data) \n            });\n        }\n    },[roomId])\n    \n    const recvMessage = (recv) => {\n        console.log(recv)\n        setMsgs([\n            {\"type\":recv.type,\"sender\":recv.type==='ENTER'?'[알림]':recv.sender,\"message\":recv.message},\n            ...msgs])\n    }\n\n    const sendMessage = () => {\n        if (chat !== ''){\n            stompClient.send(\"/pub/chat/message\", {}, JSON.stringify({type:'TALK', roomId:roomId, sender:sender, message:chat}));\n        }\n    }\n\n    const onChange = (e) => {\n        setChat(e.target.value); // 우선 e.target 에서 name 과 value 를 추출\n      };\n    \n    return (\n        <div> \n            <button onClick={()=>setRoomId('')}>뒤로가기</button>\n            <h1>방제 : {room.name}</h1>\n            <h2>나 : {sender}</h2>\n            <input type=\"text\" name=\"name\"  onKeyUp={onChange} placeholder=\"여기에 메세지 입력\"/><button onClick={sendMessage}>보내기</button>\n            <ul>\n                {msgs.map(msg => <li>{msg}</li>)}\n            </ul>\n        </div>\n    )\n}\n\n\nexport default Chat\n\n\n"]},"metadata":{},"sourceType":"module"}