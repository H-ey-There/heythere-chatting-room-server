{"ast":null,"code":"var _jsxFileName = \"/Users/jy/Desktop/heythere2/heythere-chattingroom-server/react/src/components/Chat.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport Axios from 'axios';\nimport SockJsClient from 'react-stomp';\n\nconst Chat = props => {\n  let $websocket = useRef(null);\n  const roomId = props.roomId;\n  const setRoomId = props.setRoomId;\n  const sender = props.sender;\n  const [chat, setChat] = useState('');\n  const [room, setRoom] = useState({\n    host: '',\n    users: [],\n    name: ''\n  });\n  const [count, setCount] = useState(0);\n  const [msg, setMsg] = useState([]);\n\n  const updateRoom = async () => {\n    if (roomId !== '') {\n      await Axios.get(`http://localhost:8087/chat/room/${roomId}`).then(res => {\n        setRoom(res.data);\n      });\n    }\n  };\n\n  useEffect(() => {\n    updateRoom();\n  }, []);\n\n  const recvMessage = recv => {\n    updateRoom();\n\n    if (recv.type === 'QUIT') {\n      setRoomId('');\n      return;\n    }\n\n    setCount(recv.count);\n    setMsg([{\n      \"message\": recv.message\n    }, ...msg]); // setCount(recv.count);\n  };\n\n  const sendMessage = e => {\n    if (chat !== '') {\n      $websocket.current.sendMessage('/pub/chat/message', JSON.stringify({\n        type: 'TALK',\n        roomId: roomId,\n        message: `${sender.name} : ${chat}`,\n        userId: sender.userId\n      }), {\n        'Content-Type': 'application/json'\n      });\n    }\n\n    setChat('');\n  };\n\n  const onChange = e => {\n    setChat(e.target.value);\n  };\n\n  const exit = () => {\n    if (room.host === sender.userId) {\n      $websocket.current.sendMessage('/pub/chat/message', JSON.stringify({\n        type: 'QUIT',\n        roomId: roomId,\n        message: '',\n        userId: sender.userId\n      }), {\n        'Content-Type': 'application/json'\n      });\n    } else {\n      $websocket.current.sendMessage('/pub/chat/message', JSON.stringify({\n        type: 'EXIT',\n        roomId: roomId,\n        message: sender.name + '이 퇴장하셨습니다.',\n        userId: sender.userId\n      }), {\n        'Content-Type': 'application/json'\n      });\n    }\n\n    setRoomId('');\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: exit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, \"\\uB4A4\\uB85C\\uAC00\\uAE30\"), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, \"\\uBC29\\uC81C : \", room.name), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, \"\\uC2DC\\uCCAD\\uC790\\uC218 : \", room.count), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, \"\\uB098 : \", sender.name), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    onChange: onChange,\n    placeholder: \"\\uC5EC\\uAE30\\uC5D0 \\uBA54\\uC138\\uC9C0 \\uC785\\uB825\",\n    value: chat,\n    onKeyPress: e => {\n      if (e.key === \"Enter\") {\n        sendMessage(e);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, \"\\uBCF4\\uB0B4\\uAE30\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }\n  }, msg.map(m => /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 35\n    }\n  }, m.message)))), /*#__PURE__*/React.createElement(SockJsClient, {\n    url: \"http://localhost:8087/ws-stomp\",\n    topics: ['/sub/chat/room/' + roomId],\n    onConnect: () => {\n      $websocket.current.sendMessage('/pub/chat/message', JSON.stringify({\n        type: 'ENTER',\n        roomId: roomId,\n        message: sender.name + '이 입장하였습니다.',\n        userId: sender.userId\n      }), {\n        'Content-Type': 'application/json'\n      });\n    },\n    onMessage: msg => recvMessage(msg),\n    ref: $websocket,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default Chat;","map":{"version":3,"sources":["/Users/jy/Desktop/heythere2/heythere-chattingroom-server/react/src/components/Chat.js"],"names":["React","useState","useEffect","useRef","Axios","SockJsClient","Chat","props","$websocket","roomId","setRoomId","sender","chat","setChat","room","setRoom","host","users","name","count","setCount","msg","setMsg","updateRoom","get","then","res","data","recvMessage","recv","type","message","sendMessage","e","current","JSON","stringify","userId","onChange","target","value","exit","key","map","m"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef} from 'react'\nimport Axios from 'axios';\nimport SockJsClient from 'react-stomp'\n\nconst Chat = (props) =>{\n    let $websocket = useRef(null);\n\n    const roomId = props.roomId;\n    const setRoomId = props.setRoomId;\n    const sender = props.sender;\n\n    const [chat, setChat] = useState('')\n    const [room, setRoom] = useState({\n        host: '',\n        users: [],\n        name: ''\n    })\n\n    const [count, setCount] = useState(0);\n\n    const [msg, setMsg] = useState([])\n\n    const updateRoom = async () =>{\n        if (roomId !== ''){\n            await Axios.get(`http://localhost:8087/chat/room/${roomId}`)\n                .then(res=> {\n                    setRoom(res.data)\n                });\n        }\n    }\n\n    useEffect(()=>{\n        updateRoom()\n      },[]);\n    \n    const recvMessage = (recv) => {\n        updateRoom()\n        if (recv.type === 'QUIT'){\n            setRoomId('');\n            return\n        }\n        setCount(recv.count)\n        setMsg([\n            {\n                \"message\":recv.message\n            }, ...msg])\n        // setCount(recv.count);\n    }\n\n    const sendMessage = (e) => {\n        if (chat !== ''){\n            $websocket.current.sendMessage (\n                '/pub/chat/message',\n                JSON.stringify({type:'TALK', roomId:roomId, message:`${sender.name} : ${chat}` , userId:sender.userId\n                }),\n                {'Content-Type': 'application/json'}\n            )\n        }\n        setChat('')\n    }\n\n    const onChange = (e) => {\n        setChat(e.target.value);\n      };\n\n    const exit = () => {\n        if (room.host === sender.userId) {\n            $websocket.current.sendMessage(\n                '/pub/chat/message',\n                JSON.stringify({type: 'QUIT', roomId: roomId, message: '', userId:sender.userId}),\n                {'Content-Type': 'application/json'})\n        }else {\n            $websocket.current.sendMessage(\n                '/pub/chat/message',\n                JSON.stringify({type: 'EXIT', roomId: roomId, message: sender.name+'이 퇴장하셨습니다.', userId:sender.userId}),\n                {'Content-Type': 'application/json'})\n        }\n        setRoomId('')\n    }\n    \n    return (\n        <div> \n            <button onClick={exit}>뒤로가기</button>\n\n            <h1>방제 : {room.name}</h1>\n            <h2>시청자수 : {room.count}</h2>\n            <h2>나 : {sender.name}</h2>\n\n            <input type=\"text\" name=\"name\"  onChange={onChange} placeholder=\"여기에 메세지 입력\"\n                   value={chat}\n                onKeyPress={e => {if (e.key === \"Enter\"){\n                    sendMessage(e)\n                }}}/>\n            <button onClick={sendMessage}>보내기</button>\n\n            <div>\n                <ul>\n                    {msg.map(m => <li>{m.message}</li>)}\n                </ul>\n            </div>\n\n            <SockJsClient \n                url=\"http://localhost:8087/ws-stomp\"\n                topics={['/sub/chat/room/'+roomId]}\n                onConnect={()=>{\n                    $websocket.current.sendMessage (\n                        '/pub/chat/message',\n                        JSON.stringify({type:'ENTER', roomId:roomId, message:sender.name+'이 입장하였습니다.', userId:sender.userId}),\n                        {'Content-Type': 'application/json'}\n                    )\n                }}\n                onMessage={msg => recvMessage(msg)}\n                ref={$websocket}/>\n        </div>\n    )\n}\n\n\nexport default Chat\n\n"]},"metadata":{},"sourceType":"module"}