{"ast":null,"code":"var _jsxFileName = \"/Users/jy/Desktop/chatdemo-react/src/components/Chat.js\";\nimport React, { useState } from 'react';\nimport SockJS from 'sockjs-client';\nimport Axios from 'axios';\nimport Stomp from 'stompjs';\n\nfunction Chat(props) {\n  const [chat, setChat] = useState('');\n  const [msgs, setMsgs] = useState([]);\n  let room;\n\n  const onChange = e => {\n    setChat(e.target.value); // 우선 e.target 에서 name 과 value 를 추출\n  };\n\n  let sock = new SockJS(\"http://localhost:8080/ws-stomp\");\n  let ws = Stomp.over(sock);\n  var reconnect = 0;\n\n  const findRoom = function () {\n    Axios.get('http://localhost:8080/chat/room/' + props.roomId).then(response => {\n      room = response.data;\n    });\n  };\n\n  const sendMessage = function () {\n    ws.send(\"http://localhost:8080/pub/chat/message\", {}, JSON.stringify({\n      type: 'TALK',\n      roomId: props.roomId,\n      sender: props.sender,\n      message: chat\n    }));\n    setChat('');\n  };\n\n  const recvMessage = function (recv) {\n    msgs.unshift({\n      \"type\": recv.type,\n      \"sender\": recv.type == 'ENTER' ? '[알림]' : recv.sender,\n      \"message\": recv.message\n    });\n  };\n\n  function connect() {\n    // pub/sub event\n    ws.connect({}, function (frame) {\n      ws.subscribe(\"http://localhost:8080/sub/chat/room/\" + props.roomId, function (message) {\n        var recv = JSON.parse(message.body);\n        recvMessage(recv);\n      });\n      ws.send(\"http://localhost:8080/pub/chat/message\", {}, JSON.stringify({\n        type: 'ENTER',\n        roomId: props.roomId,\n        sender: props.sender\n      }));\n    }, function (e) {\n      if (reconnect++ <= 5) {\n        setTimeout(function () {\n          console.log(\"connection reconnect\");\n          sock = new SockJS(\"http://localhost:8080/ws-stomp\");\n          ws = Stomp.over(sock);\n          connect();\n        }, 10 * 1000);\n      }\n    });\n  }\n\n  connect();\n  findRoom();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, \"\\uBC29\\uC81C : \", room), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, msgs.map(msg => /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 33\n    }\n  }, msg.sender, \" - \", msg.message))), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    onKeyUp: onChange,\n    placeholder: \"\\uBA54\\uC138\\uC9C0 \\uBCF4\\uB0B4\\uAE30\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 86\n    }\n  }, \"\\uC785\\uB825\"));\n}\n\nexport default Chat;","map":{"version":3,"sources":["/Users/jy/Desktop/chatdemo-react/src/components/Chat.js"],"names":["React","useState","SockJS","Axios","Stomp","Chat","props","chat","setChat","msgs","setMsgs","room","onChange","e","target","value","sock","ws","over","reconnect","findRoom","get","roomId","then","response","data","sendMessage","send","JSON","stringify","type","sender","message","recvMessage","recv","unshift","connect","frame","subscribe","parse","body","setTimeout","console","log","map","msg"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport SockJS from 'sockjs-client'\nimport Axios from 'axios';\nimport Stomp from 'stompjs'\n\nfunction Chat(props){\n    \n    const [chat, setChat] = useState('')\n    const [msgs, setMsgs] = useState([])\n\n    let room\n\n    const onChange = (e) => {\n        setChat(e.target.value); // 우선 e.target 에서 name 과 value 를 추출\n      };\n    let sock = new SockJS(\"http://localhost:8080/ws-stomp\");\n    let ws = Stomp.over(sock);\n    var reconnect = 0;\n    \n    const findRoom = function() {\n        Axios.get('http://localhost:8080/chat/room/'+props.roomId)\n        .then(response => { room = response.data; });\n    }\n    const sendMessage = function() {\n        ws.send(\"http://localhost:8080/pub/chat/message\", {}, \n            JSON.stringify({type:'TALK', roomId:props.roomId, sender:props.sender, message:chat}));\n        setChat('');\n    }\n\n    const recvMessage = function(recv) {\n        msgs.unshift({\"type\":recv.type,\"sender\":recv.type=='ENTER'?'[알림]':recv.sender,\"message\":recv.message})\n    }\n\n  \n      function connect() {\n          // pub/sub event\n          ws.connect({}, function(frame) {\n              ws.subscribe(\"http://localhost:8080/sub/chat/room/\"+props.roomId, function(message) {\n                  var recv = JSON.parse(message.body);\n                  recvMessage(recv);\n              });\n              ws.send(\"http://localhost:8080/pub/chat/message\", {}, JSON.stringify({type:'ENTER', roomId: props.roomId, sender: props.sender}));\n          }, function(e) {\n              if(reconnect++ <= 5) {\n                  setTimeout(function() {\n                      console.log(\"connection reconnect\");\n                      sock = new SockJS(\"http://localhost:8080/ws-stomp\");\n                      ws = Stomp.over(sock);\n                      connect();\n                  },10*1000);\n              }\n          });\n      }\n      connect(); \n      findRoom(); \n\n    return (\n        <div>\n            <h1>방제 : {room}</h1>\n            <ul>\n                {msgs.map(msg=> <li>{msg.sender} - {msg.message}</li>)}\n            </ul>\n            <input type=\"text\" name=\"name\" onKeyUp={onChange} placeholder=\"메세지 보내기\"/><button onClick={sendMessage}>입력</button>\n        </div>\n    )\n}\n\nexport default Chat\n"]},"metadata":{},"sourceType":"module"}