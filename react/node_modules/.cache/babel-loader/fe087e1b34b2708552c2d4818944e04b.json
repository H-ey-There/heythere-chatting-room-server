{"ast":null,"code":"var _jsxFileName = \"/Users/jy/Desktop/heythere2/heythere-chattingroom-server/chatdemo-react/src/components/Room.js\";\nimport Axios from 'axios';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useSetRecoilState } from 'recoil';\nimport { RoomId } from '../atoms';\nimport SockJsClient from 'react-stomp';\nconst GET_ROOM_URL = 'http://localhost:8080/chat/rooms';\n\nfunction Room() {\n  const $websocket = useRef(null);\n  const [roomList, setRoomList] = useState([]);\n  const [roomName, setRoomName] = useState('');\n  const setRoomId = useSetRecoilState(RoomId);\n\n  const fetchData = async () => {\n    const response = await Axios.get(GET_ROOM_URL);\n    setRoomList(response.data.map(room => /*#__PURE__*/React.createElement(\"li\", {\n      key: room.id,\n      onClick: () => setRoomId(room.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }\n    }, room.name))); // 데이터는 response.data 안에 들어있습니다.\n  };\n\n  useEffect(() => {\n    console.log(\"get room in room\");\n    fetchData();\n  }, []);\n\n  const onChange = e => {\n    setRoomName(e.target.value);\n  };\n\n  const createRoom = () => {\n    console.log(roomName);\n\n    if (roomName === '') {\n      alert('이름을 입력하세요!');\n      return;\n    }\n\n    $websocket.current.sendMessage();\n    Axios.post(`http://localhost:8080/chat/room?name=${roomName}`).then(res => {\n      console.log(res);\n    }).catch(e => {\n      alert(\"개설 실패\" + e);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, \"Hey, there!\"), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, \" \\uBC29 \\uC81C\\uBAA9 : \\xA0\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    onKeyUp: onChange,\n    placeholder: \"\\uC5EC\\uAE30\\uC5D0 \\uBC29\\uC81C\\uB97C \\uC785\\uB825\",\n    onKeyPress: e => {\n      if (e.key === \"Enter\") {\n        createRoom();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: createRoom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, \"\\uAC1C\\uC124\")), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, roomList), /*#__PURE__*/React.createElement(SockJsClient, {\n    url: \"http://localhost:8080/ws-stomp\",\n    topics: ['/sub/room/'],\n    onMessage: () => fetchData(),\n    ref: $websocket,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Room;","map":{"version":3,"sources":["/Users/jy/Desktop/heythere2/heythere-chattingroom-server/chatdemo-react/src/components/Room.js"],"names":["Axios","React","useState","useEffect","useRef","useSetRecoilState","RoomId","SockJsClient","GET_ROOM_URL","Room","$websocket","roomList","setRoomList","roomName","setRoomName","setRoomId","fetchData","response","get","data","map","room","id","name","console","log","onChange","e","target","value","createRoom","alert","current","sendMessage","post","then","res","catch","key"],"mappings":"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","sourcesContent":["import Axios from 'axios';\nimport React, {useState, useEffect, useRef} from 'react';\nimport { useSetRecoilState } from 'recoil';\nimport {RoomId} from '../atoms'\nimport SockJsClient from 'react-stomp'\n\nconst GET_ROOM_URL = 'http://localhost:8080/chat/rooms'\n\nfunction Room() {\n  const $websocket = useRef(null)\n  const [roomList, setRoomList] = useState([])\n  const [roomName, setRoomName] = useState('')\n  const setRoomId = useSetRecoilState(RoomId)\n\n  const fetchData = async () => {\n    const response = await Axios.get(GET_ROOM_URL);\n    setRoomList(\n        response.data.map(room=>\n            <li key={room.id}\n                onClick={()=> setRoomId(room.id)}>\n              {room.name}\n            </li>)); // 데이터는 response.data 안에 들어있습니다.\n  };\n\n  useEffect(() => {\n    console.log(\"get room in room\")\n    fetchData();\n  },[]);\n\n  const onChange = (e) => {\n    setRoomName(e.target.value);\n  };\n\n  const createRoom = () => {\n    console.log(roomName)\n    if (roomName === ''){\n      alert('이름을 입력하세요!')\n      return\n    }\n    $websocket.current.sendMessage()\n    Axios.post(`http://localhost:8080/chat/room?name=${roomName}`)\n    .then(res=>{\n        console.log(res)\n      }\n    ).catch(e=>{\n      alert(\"개설 실패\" + e)\n      }\n    )\n  }\n\n  return (\n    <div>\n        <h1>Hey, there!</h1>\n        <label> 방 제목 : &nbsp;\n        <input type=\"text\" name=\"name\" onKeyUp={onChange} placeholder=\"여기에 방제를 입력\" onKeyPress={e=>{\n          if (e.key === \"Enter\"){\n            createRoom()\n          }\n        }}/><button onClick={createRoom}>개설</button>\n        </label>\n        <ul>\n          {roomList}\n        </ul>\n      <SockJsClient\n          url=\"http://localhost:8080/ws-stomp\"\n          topics={['/sub/room/']}\n          onMessage={() => fetchData()}\n          ref={$websocket}/>\n    </div>\n  );\n}\n\nexport default Room\n"]},"metadata":{},"sourceType":"module"}