{"ast":null,"code":"var _jsxFileName = \"/Users/jy/Desktop/chatdemo-react/src/components/Chat.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport Axios from 'axios';\nimport SockJsClient from 'react-stomp';\n\nfunction Chat(props) {\n  let chat;\n  const [msgs, setMsgs] = useState([]);\n  const [room, setRoom] = useState(''); // let sock = new SockJS(\"http://localhost:8080/ws-stomp\");\n  // let ws = Stomp.over(sock);\n  // var reconnect = 0;\n  // const sendMessage = function() {\n  //     ws.send(\"http://localhost:8080/pub/chat/message\", {}, \n  //         JSON.stringify({type:'TALK', roomId:props.roomId, sender:props.sender, message:chat}));\n  // }\n  // const recvMessage = function(recv) {\n  //     setMsgs(...msgs, {\"type\":recv.type,\n  //     \"sender\":recv.type==='ENTER'?'[알림]':recv.sender, \"message\":recv.message})\n  //     console.log(\"msg : \",msgs)\n  // }\n\n  useEffect(() => {\n    Axios.get('http://localhost:8080/chat/room/' + props.roomId).then(response => {\n      setRoom(response.data.name);\n    });\n  }, []); // ws.connect({}, function(frame) {\n  //     ws.subscribe(\"http://localhost:8080/sub/chat/room/\"+props.roomId, function(message) {\n  //         var recv = JSON.parse(message.body);\n  //             recvMessage(recv);\n  //     });\n  //     ws.send(\"http://localhost:8080/pub/chat/message\", {}, JSON.stringify({type:'ENTER', roomId: props.roomId, sender: props.sender}));\n  //     }, function(e) {\n  //         if(reconnect++ <= 1) {\n  //             setTimeout(function() {\n  //                 console.log(\"connection reconnect\");\n  //                 sock = new SockJS(\"http://localhost:8080/ws-stomp\");\n  //                 ws = Stomp.over(sock);\n  //             },10*1000);\n  //           }\n  //     });\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SockJsClient, {\n    url: \"http://localhost:8080\",\n    topic: ['/chat/message'],\n    onMessage: msg => {\n      console.log(msg);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, \"\\uBC29\\uC81C : \", room), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }, \"\\uBA54\\uC138\\uC9C0 \\uB0B4\\uC5ED\"), msgs.map(msg => /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 33\n    }\n  }, msg.sender, \" - \", msg.message))), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    onKeyUp: e => chat = e.target.value,\n    placeholder: \"\\uBA54\\uC138\\uC9C0 \\uBCF4\\uB0B4\\uAE30\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 106\n    }\n  }, \"\\uC785\\uB825\"));\n}\n\nexport default Chat;","map":{"version":3,"sources":["/Users/jy/Desktop/chatdemo-react/src/components/Chat.js"],"names":["React","useState","useEffect","useRef","Axios","SockJsClient","Chat","props","chat","msgs","setMsgs","room","setRoom","get","roomId","then","response","data","name","msg","console","log","map","sender","message","e","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,aAAzB;;AAGA,SAASC,IAAT,CAAcC,KAAd,EAAoB;AAEhB,MAAIC,IAAJ;AAEA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,EAAD,CAAhC,CALgB,CAOhB;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZE,IAAAA,KAAK,CAACS,GAAN,CAAU,qCAAmCN,KAAK,CAACO,MAAnD,EACCC,IADD,CACMC,QAAQ,IAAI;AACdJ,MAAAA,OAAO,CAACI,QAAQ,CAACC,IAAT,CAAcC,IAAf,CAAP;AACH,KAHD;AAIH,GALQ,EAKP,EALO,CAAT,CAzBgB,CAiChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,YAAD;AACI,IAAA,GAAG,EAAC,uBADR;AAEI,IAAA,KAAK,EAAE,CAAC,eAAD,CAFX;AAGI,IAAA,SAAS,EAAEC,GAAG,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,KALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAUR,IAAV,CARJ,eASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCADJ,EAEKF,IAAI,CAACa,GAAL,CAASH,GAAG,iBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,GAAG,CAACI,MAAT,SAAoBJ,GAAG,CAACK,OAAxB,CAAf,CAFL,CATJ,eAaI;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,MAAxB;AAA+B,IAAA,OAAO,EAAGC,CAAD,IAAOjB,IAAI,GAAGiB,CAAC,CAACC,MAAF,CAASC,KAA/D;AAAsE,IAAA,WAAW,EAAC,uCAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbJ,eAaiG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAbjG,CADJ;AAiBH;;AAED,eAAerB,IAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport Axios from 'axios';\nimport SockJsClient from 'react-stomp'\n\n\nfunction Chat(props){\n    \n    let chat\n\n    const [msgs, setMsgs] = useState([])\n    const [room, setRoom] = useState('')\n\n    // let sock = new SockJS(\"http://localhost:8080/ws-stomp\");\n    // let ws = Stomp.over(sock);\n    // var reconnect = 0;\n    \n\n    \n    // const sendMessage = function() {\n    //     ws.send(\"http://localhost:8080/pub/chat/message\", {}, \n    //         JSON.stringify({type:'TALK', roomId:props.roomId, sender:props.sender, message:chat}));\n    // }\n\n    // const recvMessage = function(recv) {\n    //     setMsgs(...msgs, {\"type\":recv.type,\n    //     \"sender\":recv.type==='ENTER'?'[알림]':recv.sender, \"message\":recv.message})\n\n    //     console.log(\"msg : \",msgs)\n    // }\n\n    useEffect(() => {\n        Axios.get('http://localhost:8080/chat/room/'+props.roomId)\n        .then(response => { \n            setRoom(response.data.name) \n        });\n    },[])\n\n\n    // ws.connect({}, function(frame) {\n    //     ws.subscribe(\"http://localhost:8080/sub/chat/room/\"+props.roomId, function(message) {\n    //         var recv = JSON.parse(message.body);\n    //             recvMessage(recv);\n    //     });\n    //     ws.send(\"http://localhost:8080/pub/chat/message\", {}, JSON.stringify({type:'ENTER', roomId: props.roomId, sender: props.sender}));\n    //     }, function(e) {\n    //         if(reconnect++ <= 1) {\n    //             setTimeout(function() {\n    //                 console.log(\"connection reconnect\");\n    //                 sock = new SockJS(\"http://localhost:8080/ws-stomp\");\n    //                 ws = Stomp.over(sock);\n    //             },10*1000);\n    //           }\n    //     });\n\n    \n\n    return (\n        <div>\n            <SockJsClient\n                url=\"http://localhost:8080\"\n                topic={['/chat/message']}\n                onMessage={msg => {\n                    console.log(msg)\n                }}\n            />\n            <h1>방제 : {room}</h1>\n            <ul>\n                <li>메세지 내역</li>\n                {msgs.map(msg=> <li>{msg.sender} - {msg.message}</li>)}\n            </ul>\n            <input type=\"text\" name=\"name\" onKeyUp={(e) => chat = e.target.value} placeholder=\"메세지 보내기\"/><button>입력</button>\n        </div>\n    )\n}\n\nexport default Chat\n"]},"metadata":{},"sourceType":"module"}