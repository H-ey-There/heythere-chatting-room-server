{"ast":null,"code":"var _jsxFileName = \"/Users/jy/Desktop/heythere2/heythere-chattingroom-server/chatdemo-react/src/components/Chat.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport Axios from 'axios';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { RoomId, Sender } from '../atoms';\nimport SockJsClient from 'react-stomp';\n\nfunction Chat() {\n  let $websocket = useRef(null);\n  const [roomId, setRoomId] = useRecoilState(RoomId);\n  const sender = useRecoilValue(Sender);\n  const [chat, setChat] = useState('');\n  const [room, setRoom] = useState({\n    host: '',\n    users: []\n  });\n  const [msg, setMsg] = useState([]);\n\n  const updateRoom = async () => {\n    if (roomId !== '') {\n      await Axios.get(`http://localhost:8080/chat/room/${roomId}`).then(res => {\n        setRoom(res.data);\n      });\n    }\n  };\n\n  useEffect(() => {\n    console.log(\"sender : \", sender);\n    updateRoom();\n  }, []);\n\n  const recvMessage = recv => {\n    updateRoom();\n    console.log(\"userlist :\", room.users);\n    console.log(\"received: \", recv.message);\n\n    if (recv.type === 'HOST') {\n      setRoomId('');\n      return;\n    }\n\n    setMsg([{\n      \"type\": recv.type,\n      \"sender\": recv.type === 'ENTER' || recv.type === 'EXIT' ? '[알림]' : recv.sender,\n      \"message\": recv.message\n    }, ...msg]);\n  };\n\n  const sendMessage = e => {\n    if (chat !== '') {\n      $websocket.current.sendMessage('/pub/chat/message', JSON.stringify({\n        type: 'TALK',\n        roomId: roomId,\n        sender: sender.userId,\n        message: chat\n      }), {\n        'Content-Type': 'application/json'\n      });\n    }\n  };\n\n  const onChange = e => {\n    setChat(e.target.value);\n  };\n\n  const exit = () => {\n    if (room.host === sender.userId) {\n      $websocket.current.sendMessage('/pub/chat/message', JSON.stringify({\n        type: 'HOST',\n        roomId: roomId,\n        sender: sender.userId,\n        message: ''\n      }), {\n        'Content-Type': 'application/json'\n      });\n    } else {\n      $websocket.current.sendMessage('/pub/chat/message', JSON.stringify({\n        type: 'EXIT',\n        roomId: roomId,\n        sender: sender.userId,\n        message: ''\n      }), {\n        'Content-Type': 'application/json'\n      });\n    }\n\n    setRoomId('');\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: exit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, \"\\uB4A4\\uB85C\\uAC00\\uAE30\"), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, \"\\uBC29\\uC81C : \", room.name), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, \"\\uB098 : \", sender.name), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    onKeyUp: onChange,\n    placeholder: \"\\uC5EC\\uAE30\\uC5D0 \\uBA54\\uC138\\uC9C0 \\uC785\\uB825\",\n    onKeyPress: e => {\n      if (e.key === \"Enter\") {\n        sendMessage(e);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, \"\\uBCF4\\uB0B4\\uAE30\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }, msg.map(m => /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 35\n    }\n  }, m.sender, \": \", m.message)))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, \"\\uC720\\uC800\\uB9AC\\uC2A4\\uD2B8\", room.users), /*#__PURE__*/React.createElement(SockJsClient, {\n    url: \"http://localhost:8080/ws-stomp\",\n    topics: ['/sub/chat/room/' + roomId],\n    onConnect: () => {\n      $websocket.current.sendMessage('/pub/chat/message', JSON.stringify({\n        type: 'ENTER',\n        roomId: roomId,\n        sender: sender.userId,\n        message: ''\n      }), {\n        'Content-Type': 'application/json'\n      });\n    },\n    onMessage: msg => recvMessage(msg),\n    ref: $websocket,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default Chat;","map":{"version":3,"sources":["/Users/jy/Desktop/heythere2/heythere-chattingroom-server/chatdemo-react/src/components/Chat.js"],"names":["React","useState","useEffect","useRef","Axios","useRecoilState","useRecoilValue","RoomId","Sender","SockJsClient","Chat","$websocket","roomId","setRoomId","sender","chat","setChat","room","setRoom","host","users","msg","setMsg","updateRoom","get","then","res","data","console","log","recvMessage","recv","message","type","sendMessage","e","current","JSON","stringify","userId","onChange","target","value","exit","name","key","map","m"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef} from 'react'\nimport Axios from 'axios';\nimport {useRecoilState, useRecoilValue} from 'recoil';\nimport {RoomId, Sender} from '../atoms'\nimport SockJsClient from 'react-stomp'\n\nfunction Chat(){\n    let $websocket = useRef(null);\n\n    const [roomId, setRoomId] = useRecoilState(RoomId)\n    const sender = useRecoilValue(Sender);\n\n    const [chat, setChat] = useState('')\n    const [room, setRoom] = useState({\n        host: '',\n        users: []\n    })\n\n    const [msg, setMsg] = useState([])\n\n    const updateRoom = async () =>{\n        if (roomId !== ''){\n            await Axios.get(`http://localhost:8080/chat/room/${roomId}`)\n                .then(res=> {\n                    setRoom(res.data)\n                });\n        }\n    }\n\n    useEffect(()=>{\n        console.log(\"sender : \",sender)\n        updateRoom()\n      },[]);\n    \n    const recvMessage = (recv) => {\n        updateRoom()\n        console.log(\"userlist :\", room.users)\n        console.log(\"received: \", recv.message)\n        if (recv.type === 'HOST'){\n            setRoomId('')\n            return\n        }\n        setMsg([\n            {\n                \"type\":recv.type,\n                \"sender\":(recv.type === 'ENTER' || recv.type === 'EXIT')  ? '[알림]' : recv.sender,\n                \"message\":recv.message\n            },\n            ...msg])\n    }\n\n    const sendMessage = (e) => {\n        if (chat !== ''){\n            $websocket.current.sendMessage (\n                '/pub/chat/message',\n                JSON.stringify({type:'TALK', roomId:roomId, sender:sender.userId, message:chat}),\n                {'Content-Type': 'application/json'}\n            )\n        }\n    }\n\n    const onChange = (e) => {\n        setChat(e.target.value);\n      };\n\n    const exit = () => {\n        if (room.host === sender.userId) {\n            $websocket.current.sendMessage(\n                '/pub/chat/message',\n                JSON.stringify({type: 'HOST', roomId: roomId, sender: sender.userId, message: ''}),\n                {'Content-Type': 'application/json'})\n        }else {\n            $websocket.current.sendMessage(\n                '/pub/chat/message',\n                JSON.stringify({type: 'EXIT', roomId: roomId, sender: sender.userId, message: ''}),\n                {'Content-Type': 'application/json'})\n        }\n        setRoomId('')\n    }\n    \n    return (\n        <div> \n            <button onClick={exit}>뒤로가기</button>\n\n            <h1>방제 : {room.name}</h1>\n            <h2>나 : {sender.name}</h2>\n\n            <input type=\"text\" name=\"name\"  onKeyUp={onChange} placeholder=\"여기에 메세지 입력\" \n                onKeyPress={e => {if (e.key === \"Enter\"){\n                    sendMessage(e)\n                }}}/>\n            <button onClick={sendMessage}>보내기</button>\n\n            <div>\n                <ul>\n                    {msg.map(m => <li>{m.sender}: {m.message}</li>)}\n                </ul>\n            </div>\n            <div>\n                유저리스트\n                {room.users}\n            </div>\n\n            <SockJsClient \n                url=\"http://localhost:8080/ws-stomp\" \n                topics={['/sub/chat/room/'+roomId]}\n                onConnect={()=>{\n                    $websocket.current.sendMessage (\n                        '/pub/chat/message',\n                        JSON.stringify({type:'ENTER', roomId:roomId, sender:sender.userId, message:''}),\n                        {'Content-Type': 'application/json'}\n                    )\n                }}\n                onMessage={msg => recvMessage(msg)}\n                ref={$websocket}/>\n        </div>\n    )\n}\n\n\nexport default Chat\n\n\n"]},"metadata":{},"sourceType":"module"}