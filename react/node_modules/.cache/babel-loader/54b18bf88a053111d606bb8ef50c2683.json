{"ast":null,"code":"var _jsxFileName = \"/Users/jy/Desktop/chatdemo-react/src/components/Chat2.js\";\nimport React from 'react';\nimport SockJsClient from \"react-stomp\";\nimport UsernameGenerator from \"username-generator\";\nimport Fetch from \"json-fetch\";\nimport { TalkBox } from \"react-talk\";\nimport randomstring from \"randomstring\";\n\nclass Chat2 extends React.Component {\n  constructor(props) {\n    super(props); // randomUserId is used to emulate a unique user id for this demo usage\n\n    this.onMessageReceive = (msg, topic) => {\n      //alert(JSON.stringify(msg) + \" @ \" +  JSON.stringify(this.state.messages)+\" @ \" + JSON.stringify(topic));\n      this.setState(prevState => ({\n        messages: [...prevState.messages, msg]\n      }));\n    };\n\n    this.sendMessage = (msg, selfMsg) => {\n      try {\n        var send_message = {\n          \"user\": selfMsg.author,\n          \"message\": selfMsg.message\n        };\n        this.clientRef.sendMessage(\"/app/message\", JSON.stringify(send_message));\n        return true;\n      } catch (e) {\n        return false;\n      }\n    };\n\n    this.randomUserName = UsernameGenerator.generateUsername(\"-\");\n    this.randomUserId = randomstring.generate();\n    this.sendURL = \"/message\";\n    this.state = {\n      clientConnected: false,\n      messages: []\n    };\n  }\n\n  componentWillMount() {\n    console.log(\"call history\");\n    Fetch(\"/history\", {\n      method: \"GET\"\n    }).then(response => {\n      this.setState({\n        messages: response.body\n      });\n    });\n  }\n\n  render() {\n    const wsSourceUrl = \"http://localhost:8080/chatting\";\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(TalkBox, {\n      topic: \"/topic/public\",\n      currentUserId: this.randomUserId,\n      currentUser: this.randomUserName,\n      messages: this.state.messages,\n      onSendMessage: this.sendMessage,\n      connected: this.state.clientConnected,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(SockJsClient, {\n      url: wsSourceUrl,\n      topics: [\"/topic/public\"],\n      onMessage: this.onMessageReceive,\n      ref: client => {\n        this.clientRef = client;\n      },\n      onConnect: () => {\n        this.setState({\n          clientConnected: true\n        });\n      },\n      onDisconnect: () => {\n        this.setState({\n          clientConnected: false\n        });\n      },\n      debug: false,\n      style: [{\n        width: '100%',\n        height: '100%'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default Chat2;","map":{"version":3,"sources":["/Users/jy/Desktop/chatdemo-react/src/components/Chat2.js"],"names":["React","SockJsClient","UsernameGenerator","Fetch","TalkBox","randomstring","Chat2","Component","constructor","props","onMessageReceive","msg","topic","setState","prevState","messages","sendMessage","selfMsg","send_message","author","message","clientRef","JSON","stringify","e","randomUserName","generateUsername","randomUserId","generate","sendURL","state","clientConnected","componentWillMount","console","log","method","then","response","body","render","wsSourceUrl","client","width","height"],"mappings":"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","sourcesContent":["import React from 'react';\nimport SockJsClient from \"react-stomp\";\nimport UsernameGenerator from \"username-generator\";\nimport Fetch from \"json-fetch\";\nimport { TalkBox } from \"react-talk\";\nimport randomstring from\"randomstring\";\n\nclass Chat2 extends React.Component {\n \n  constructor(props) {\n    super(props);\n    // randomUserId is used to emulate a unique user id for this demo usage\n    this.randomUserName = UsernameGenerator.generateUsername(\"-\");\n    this.randomUserId = randomstring.generate();\n    this.sendURL = \"/message\";\n    this.state = {\n      clientConnected : false,\n      messages : []\n    };\n    \n  }\n\n  onMessageReceive = (msg, topic) => {\n    //alert(JSON.stringify(msg) + \" @ \" +  JSON.stringify(this.state.messages)+\" @ \" + JSON.stringify(topic));\n    this.setState(prevState => ({\n      messages: [...prevState.messages, msg]\n    }));\n  }\n\n  sendMessage = (msg, selfMsg) => {\n    try {\n      var send_message = {\n        \"user\" : selfMsg.author,\n        \"message\" : selfMsg.message\n      }\n      this.clientRef.sendMessage(\"/app/message\", JSON.stringify(send_message));\n      return true;\n    } catch(e) {\n      return false;\n    }\n  }\n\n  componentWillMount() {\n    console.log(\"call history\");\n    Fetch(\"/history\", {\n      method: \"GET\"\n    }).then((response) => {\n      this.setState({ messages: response.body });\n    });\n  }\n\n  render() {\n    const wsSourceUrl = \"http://localhost:8080/chatting\";\n    return (\n      <div>\n        <TalkBox topic=\"/topic/public\" currentUserId={ this.randomUserId }\n          currentUser={ this.randomUserName } messages={ this.state.messages }\n          onSendMessage={ this.sendMessage } connected={ this.state.clientConnected }/>\n        \n        <SockJsClient url={ wsSourceUrl } topics={[\"/topic/public\"]}\n          onMessage={ this.onMessageReceive } ref={ (client) => { this.clientRef = client }}\n          onConnect={ () => {this.setState({ clientConnected: true }) } }\n          onDisconnect={ () => { this.setState({ clientConnected: false }) } }\n          debug={ false } style={[{width:'100%', height:'100%'}]}/>\n      </div>\n    );\n  }\n}\n\nexport default Chat2;\n"]},"metadata":{},"sourceType":"module"}