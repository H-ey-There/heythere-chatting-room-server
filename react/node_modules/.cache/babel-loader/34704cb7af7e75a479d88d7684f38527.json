{"ast":null,"code":"var _jsxFileName = \"/Users/jy/Desktop/chatdemo-react/src/components/Chat.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport Axios from 'axios';\nimport { useRecoilState } from 'recoil';\nimport { RoomId } from '../atoms';\nimport SockJsClient from 'react-stomp';\nimport Stomp from 'stompjs';\n\nfunction Chat() {\n  const $websocket = useRef(null); // const sock = new SockJsClient(\"http://localhost:8080/ws-stomp\")\n  // const stompClient = Stomp.over(sock);\n\n  const [roomId, setRoomId] = useRecoilState(RoomId);\n  const [sender, setSender] = useState('Guest');\n  const [chat, setChat] = useState('');\n  const [room, setRoom] = useState('');\n  const [msgs, setMsgs] = useState([]); // const connect = async () => {\n  //     console.log(\"init\")\n  //     await stompClient.connect({},()=>{\n  //         stompClient.subscribe(\"/sub/chat/room/\"+roomId,(msg)=>{\n  //             console.log(\"msg: \" , msg.body)\n  //             const newMessage = JSON.parse(msg.body) ;\n  //             recvMessage(newMessage);\n  //         });\n  //     });\n  // }\n\n  useEffect(() => {\n    // connect();\n    if (roomId !== '') {\n      Axios.get(`http://localhost:8080/chat/room/${roomId}`).then(res => {\n        setRoom(res.data);\n      });\n    } // stompClient.send(\"/pub/chat/message\", {}, JSON.stringify({type:'ENTER', roomId:roomId, sender:sender}));\n\n  }, [roomId]);\n\n  const recvMessage = recv => {\n    console.log(\"received\");\n    setMsgs([{\n      \"type\": recv.type,\n      \"sender\": recv.type === 'ENTER' ? '[알림]' : recv.sender,\n      \"message\": recv.message\n    }, ...msgs]);\n  };\n\n  const sendMessage = () => {\n    if (chat !== '') {\n      $websocket.current.sendMessage('/pub/chat/message', {}, JSON.stringify({\n        type: 'TALK',\n        roomId: roomId,\n        sender: sender,\n        message: chat\n      })); // console.log(stompClient.ws)\n      // stompClient.send(\n      //     \"/pub/chat/message\", \n      //     {}, \n      //     JSON.stringify({type:'TALK', roomId:roomId, sender:sender, message:chat})\n    }\n  };\n\n  const onChange = e => {\n    setChat(e.target.value); // 우선 e.target 에서 name 과 value 를 추출\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setRoomId(''),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, \"\\uB4A4\\uB85C\\uAC00\\uAE30\"), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, \"\\uBC29\\uC81C : \", room.name), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, \"\\uB098 : \", sender), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    onKeyUp: onChange,\n    placeholder: \"\\uC5EC\\uAE30\\uC5D0 \\uBA54\\uC138\\uC9C0 \\uC785\\uB825\",\n    onKeyPress: e => {\n      if (e.key === \"Enter\") {\n        sendMessage();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, \"\\uBCF4\\uB0B4\\uAE30\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, msgs.map(msg => /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 34\n    }\n  }, msg.sender, \" - \", msg.message))), /*#__PURE__*/React.createElement(SockJsClient, {\n    url: \"http://localhost:8080/ws-stomp\",\n    topics: ['/sub/chat/room/'],\n    onMessage: msg => recvMessage(msg),\n    ref: $websocket,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default Chat;","map":{"version":3,"sources":["/Users/jy/Desktop/chatdemo-react/src/components/Chat.js"],"names":["React","useState","useEffect","useRef","Axios","useRecoilState","RoomId","SockJsClient","Stomp","Chat","$websocket","roomId","setRoomId","sender","setSender","chat","setChat","room","setRoom","msgs","setMsgs","get","then","res","data","recvMessage","recv","console","log","type","message","sendMessage","current","JSON","stringify","onChange","e","target","value","name","key","map","msg"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef} from 'react'\nimport Axios from 'axios';\nimport {useRecoilState} from 'recoil';\nimport {RoomId} from '../atoms'\nimport SockJsClient from 'react-stomp'\nimport Stomp from 'stompjs';\n\n\n\nfunction Chat(){\n    const $websocket = useRef (null);\n\n    // const sock = new SockJsClient(\"http://localhost:8080/ws-stomp\")\n    // const stompClient = Stomp.over(sock);\n\n    const [roomId,setRoomId] = useRecoilState(RoomId)\n    const [sender, setSender] = useState('Guest')\n\n    const [chat, setChat] = useState('')\n    const [room, setRoom] = useState('')\n\n    const [msgs, setMsgs] = useState([])\n\n    // const connect = async () => {\n    //     console.log(\"init\")\n\n    //     await stompClient.connect({},()=>{\n    //         stompClient.subscribe(\"/sub/chat/room/\"+roomId,(msg)=>{\n    //             console.log(\"msg: \" , msg.body)\n    //             const newMessage = JSON.parse(msg.body) ;\n    //             recvMessage(newMessage);\n    //         });\n    //     });\n    // }\n\n    useEffect(()=>{\n        // connect();\n        if (roomId !== ''){\n            Axios.get(`http://localhost:8080/chat/room/${roomId}`)\n            .then(res=> { \n                setRoom(res.data) \n            });\n        }\n\n        // stompClient.send(\"/pub/chat/message\", {}, JSON.stringify({type:'ENTER', roomId:roomId, sender:sender}));\n      },[roomId]);\n    \n    const recvMessage = (recv) => {\n        console.log(\"received\")\n        setMsgs([\n            {\"type\":recv.type,\"sender\":recv.type === 'ENTER'?'[알림]':recv.sender,\"message\":recv.message},\n            ...msgs])\n    }\n\n    const sendMessage = () => {\n        if (chat !== ''){\n            $websocket.current.sendMessage (\n                '/pub/chat/message',\n                {},\n                JSON.stringify({type:'TALK', roomId:roomId, sender:sender, message:chat})\n            )\n            // console.log(stompClient.ws)\n            // stompClient.send(\n            //     \"/pub/chat/message\", \n            //     {}, \n            //     JSON.stringify({type:'TALK', roomId:roomId, sender:sender, message:chat})\n        }\n        \n    }\n\n    const onChange = (e) => {\n        setChat(e.target.value); // 우선 e.target 에서 name 과 value 를 추출\n      };\n    \n    return (\n        <div> \n            <button onClick={()=>setRoomId('')}>뒤로가기</button>\n            <h1>방제 : {room.name}</h1>\n            <h2>나 : {sender}</h2>\n            <input type=\"text\" name=\"name\"  onKeyUp={onChange} placeholder=\"여기에 메세지 입력\" \n                onKeyPress={e => {if (e.key === \"Enter\"){\n                    sendMessage()\n                }}}/>\n            <button onClick={sendMessage}>보내기</button>\n            <ul>\n                {msgs.map(msg => <li>{msg.sender} - {msg.message}</li>)}\n            </ul>\n            <SockJsClient \n                url=\"http://localhost:8080/ws-stomp\" \n                topics={['/sub/chat/room/']} \n                onMessage={msg => recvMessage(msg)}\n                ref={$websocket}/> \n\n            \n        </div>\n    )\n}\n\n\nexport default Chat\n\n\n"]},"metadata":{},"sourceType":"module"}