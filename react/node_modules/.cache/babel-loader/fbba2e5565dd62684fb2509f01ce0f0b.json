{"ast":null,"code":"var _jsxFileName = \"/Users/jy/Desktop/heythere2/heythere-chattingroom-server/react/src/components/Room.js\";\nimport Axios from 'axios';\nimport React, { useState, useEffect, useRef } from 'react';\nimport SockJsClient from 'react-stomp';\nconst GET_ROOM_URL = 'http://localhost:8087/chat/rooms';\nconst USER_URL = 'http://localhost:8087/user/';\n\nfunction Room() {\n  const $websocket = useRef(null);\n  const [roomId, setRoomId] = useState('');\n  const [roomList, setRoomList] = useState([]);\n  const [roomName, setRoomName] = useState('');\n  const [sender, setSender] = useState({\n    userId: '',\n    name: ''\n  });\n\n  const fetchData = async () => {\n    const response = await Axios.get(GET_ROOM_URL);\n\n    if (response.data == null) {\n      return;\n    }\n\n    setRoomList(response.data.map(room => /*#__PURE__*/React.createElement(\"li\", {\n      key: room.roomId,\n      onClick: () => setRoomId(room.roomId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }\n    }, room.name))); // 데이터는 response.data 안에 들어있습니다.\n  };\n\n  const login = () => {\n    const name = prompt(\"여기에 이름을 입력 \");\n    Axios.post(USER_URL, {\n      name: name\n    }).then(response => {\n      setSender(response.data);\n    });\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const onChange = e => {\n    setRoomName(e.target.value);\n  };\n\n  const createRoom = () => {\n    if (roomName === '') {\n      alert('이름을 입력하세요!');\n      return;\n    }\n\n    $websocket.current.sendMessage(\"/pub/room\", JSON.stringify({\n      name: roomName,\n      host: sender.userId\n    }), {\n      'Content-Type': 'application/json'\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, \"Hey, there!\"), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, sender.name), sender.userId === '' ? /*#__PURE__*/React.createElement(\"button\", {\n    onClick: login,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }, \"\\uB85C\\uADF8\\uC778\") : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }\n  }, \" \\uBC29 \\uC81C\\uBAA9 : \\xA0\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    onKeyUp: onChange,\n    placeholder: \"\\uC5EC\\uAE30\\uC5D0 \\uBC29\\uC81C\\uB97C \\uC785\\uB825\",\n    onKeyPress: e => {\n      if (e.key === \"Enter\") {\n        createRoom();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: createRoom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }, \"\\uAC1C\\uC124\")), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, roomList), /*#__PURE__*/React.createElement(SockJsClient, {\n    url: \"http://localhost:8087/ws-stomp\",\n    topics: ['/sub/room/'],\n    onMessage: msg => {\n      if (sender.userId === msg.host) setRoomId(msg.roomId);\n      fetchData();\n    },\n    ref: $websocket,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default Room;","map":{"version":3,"sources":["/Users/jy/Desktop/heythere2/heythere-chattingroom-server/react/src/components/Room.js"],"names":["Axios","React","useState","useEffect","useRef","SockJsClient","GET_ROOM_URL","USER_URL","Room","$websocket","roomId","setRoomId","roomList","setRoomList","roomName","setRoomName","sender","setSender","userId","name","fetchData","response","get","data","map","room","login","prompt","post","then","onChange","e","target","value","createRoom","alert","current","sendMessage","JSON","stringify","host","key","msg"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,MAApC,QAAiD,OAAjD;AACA,OAAOC,YAAP,MAAyB,aAAzB;AAEA,MAAMC,YAAY,GAAG,kCAArB;AACA,MAAMC,QAAQ,GAAG,6BAAjB;;AAEA,SAASC,IAAT,GAAgB;AACZ,QAAMC,UAAU,GAAGL,MAAM,CAAC,IAAD,CAAzB;AAEA,QAAM,CAACM,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACc,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAChC;AACIgB,IAAAA,MAAM,EAAC,EADX;AAEIC,IAAAA,IAAI,EAAC;AAFT,GADgC,CAApC;;AAOA,QAAMC,SAAS,GAAG,YAAY;AAC1B,UAAMC,QAAQ,GAAG,MAAMrB,KAAK,CAACsB,GAAN,CAAUhB,YAAV,CAAvB;;AACA,QAAIe,QAAQ,CAACE,IAAT,IAAiB,IAArB,EAA0B;AACtB;AACH;;AACDV,IAAAA,WAAW,CACPQ,QAAQ,CAACE,IAAT,CAAcC,GAAd,CAAkBC,IAAI,iBAClB;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACf,MAAd;AACI,MAAA,OAAO,EAAE,MAAMC,SAAS,CAACc,IAAI,CAACf,MAAN,CAD5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEKe,IAAI,CAACN,IAFV,CADJ,CADO,CAAX,CAL0B,CAUT;AACpB,GAXD;;AAaA,QAAMO,KAAK,GAAG,MAAM;AAChB,UAAMP,IAAI,GAAGQ,MAAM,CAAC,aAAD,CAAnB;AACA3B,IAAAA,KAAK,CAAC4B,IAAN,CAAWrB,QAAX,EAAqB;AACjBY,MAAAA,IAAI,EAAGA;AADU,KAArB,EAGEU,IAHF,CAGOR,QAAQ,IAAG;AACdJ,MAAAA,SAAS,CAACI,QAAQ,CAACE,IAAV,CAAT;AACH,KALD;AAOH,GATD;;AAWApB,EAAAA,SAAS,CAAC,MAAM;AACZiB,IAAAA,SAAS;AACZ,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMU,QAAQ,GAAIC,CAAD,IAAO;AACpBhB,IAAAA,WAAW,CAACgB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAX;AACH,GAFD;;AAIA,QAAMC,UAAU,GAAG,MAAM;AAErB,QAAIpB,QAAQ,KAAK,EAAjB,EAAqB;AACjBqB,MAAAA,KAAK,CAAC,YAAD,CAAL;AACA;AACH;;AAED1B,IAAAA,UAAU,CAAC2B,OAAX,CAAmBC,WAAnB,CACI,WADJ,EAEIC,IAAI,CAACC,SAAL,CAAe;AAACpB,MAAAA,IAAI,EAAEL,QAAP;AAAiB0B,MAAAA,IAAI,EAAExB,MAAM,CAACE;AAA9B,KAAf,CAFJ,EAGI;AAAC,sBAAgB;AAAjB,KAHJ;AAIH,GAXD;;AAaA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKF,MAAM,CAACG,IAAZ,CAFJ,EAGKH,MAAM,CAACE,MAAP,KAAkB,EAAlB,gBACG;AAAQ,IAAA,OAAO,EAAEQ,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADH,gBAEG,uDACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDACI;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,MAAxB;AAA+B,IAAA,OAAO,EAAEI,QAAxC;AAAkD,IAAA,WAAW,EAAC,oDAA9D;AAA2E,IAAA,UAAU,EAAEC,CAAC,IAAI;AACxF,UAAIA,CAAC,CAACU,GAAF,KAAU,OAAd,EAAuB;AACnBP,QAAAA,UAAU;AACb;AACJ,KAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADA,eAQA;AAAQ,IAAA,OAAO,EAAEA,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBARA,CALR,eAgBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKtB,QADL,CAhBJ,eAmBI,oBAAC,YAAD;AACI,IAAA,GAAG,EAAC,gCADR;AAEI,IAAA,MAAM,EAAE,CAAC,YAAD,CAFZ;AAGI,IAAA,SAAS,EACJ8B,GAAD,IAAS;AACL,UAAI1B,MAAM,CAACE,MAAP,KAAkBwB,GAAG,CAACF,IAA1B,EACI7B,SAAS,CAAC+B,GAAG,CAAChC,MAAL,CAAT;AACJU,MAAAA,SAAS;AACZ,KART;AAUI,IAAA,GAAG,EAAEX,UAVT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnBJ,CADJ;AAiCH;;AAED,eAAeD,IAAf","sourcesContent":["import Axios from 'axios';\nimport React, {useState, useEffect, useRef} from 'react';\nimport SockJsClient from 'react-stomp'\n\nconst GET_ROOM_URL = 'http://localhost:8087/chat/rooms'\nconst USER_URL = 'http://localhost:8087/user/'\n\nfunction Room() {\n    const $websocket = useRef(null)\n\n    const [roomId, setRoomId] = useState('')\n    const [roomList, setRoomList] = useState([])\n    const [roomName, setRoomName] = useState('')\n    const [sender, setSender] = useState(\n        {\n            userId:'',\n            name:''\n        }\n    )\n\n    const fetchData = async () => {\n        const response = await Axios.get(GET_ROOM_URL);\n        if (response.data == null){\n            return\n        }\n        setRoomList(\n            response.data.map(room =>\n                <li key={room.roomId}\n                    onClick={() => setRoomId(room.roomId)}>\n                    {room.name}\n                </li>)); // 데이터는 response.data 안에 들어있습니다.\n    };\n\n    const login = () => {\n        const name = prompt(\"여기에 이름을 입력 \")\n        Axios.post(USER_URL, {\n            name : name\n            }\n        ).then(response=> {\n            setSender(response.data);\n        });\n\n    }\n\n    useEffect(() => {\n        fetchData();\n    }, []);\n\n    const onChange = (e) => {\n        setRoomName(e.target.value);\n    };\n\n    const createRoom = () => {\n\n        if (roomName === '') {\n            alert('이름을 입력하세요!')\n            return\n        }\n\n        $websocket.current.sendMessage(\n            \"/pub/room\",\n            JSON.stringify({name: roomName, host: sender.userId}),\n            {'Content-Type': 'application/json'})\n    }\n\n    return (\n        <div>\n            <h1>Hey, there!</h1>\n            <h4>{sender.name}</h4>\n            {sender.userId === '' ?\n                <button onClick={login}>로그인</button> :\n                <>\n                <label> 방 제목 : &nbsp;\n                    <input type=\"text\" name=\"name\" onKeyUp={onChange} placeholder=\"여기에 방제를 입력\" onKeyPress={e => {\n                        if (e.key === \"Enter\") {\n                            createRoom()\n                        }\n                    }}/>\n                </label>\n                <button onClick={createRoom}>개설</button>\n                </>\n            }\n            <ul>\n                {roomList}\n            </ul>\n            <SockJsClient\n                url=\"http://localhost:8087/ws-stomp\"\n                topics={['/sub/room/']}\n                onMessage={\n                    (msg) => {\n                        if (sender.userId === msg.host)\n                            setRoomId(msg.roomId);\n                        fetchData()\n                    }\n                }\n                ref={$websocket}/>\n        </div>\n    );\n}\n\nexport default Room\n"]},"metadata":{},"sourceType":"module"}