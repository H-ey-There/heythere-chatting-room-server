{"ast":null,"code":"var _jsxFileName = \"/Users/jy/Desktop/chatdemo-react/src/components/Chat.js\";\nimport React, { useState } from 'react';\nimport SockJS from 'sockjs-client';\nimport Axios from 'axios';\nimport Stomp from 'stompjs';\n\nfunction Chat(props) {\n  let chat;\n  const [msgs, setMsgs] = useState([]);\n  const [room, setRoom] = useState('');\n  let sock = new SockJS(\"http://localhost:8080/ws-stomp\");\n  let ws = Stomp.over(sock);\n  var reconnect = 0; // Axios.get('http://localhost:8080/chat/room/'+props.roomId)\n  // .then(response => { \n  //     console.log(\"roomname : \" ,response.data.name)\n  //     setRoom(response.data.name) \n  // });\n\n  const sendMessage = function () {\n    ws.send(\"http://localhost:8080/pub/chat/message\", {}, JSON.stringify({\n      type: 'TALK',\n      roomId: props.roomId,\n      sender: props.sender,\n      message: chat\n    }));\n    console.log(123);\n    chat = '';\n  };\n\n  const recvMessage = function (recv) {\n    setMsgs(...msgs, {\n      \"type\": recv.type,\n      \"sender\": recv.type == 'ENTER' ? '[알림]' : recv.sender,\n      \"message\": recv.message\n    });\n    console.log(\"msg : \", msgs);\n  }; // pub/sub event\n\n\n  ws.connect({}, function (frame) {\n    ws.subscribe(\"http://localhost:8080/sub/chat/room/\" + props.roomId, function (message) {\n      var recv = JSON.parse(message.body);\n      recvMessage(recv);\n    });\n    ws.send(\"http://localhost:8080/pub/chat/message\", {}, JSON.stringify({\n      type: 'ENTER',\n      roomId: props.roomId,\n      sender: props.sender\n    }));\n  }, function (e) {\n    if (reconnect++ <= 1) {\n      setTimeout(function () {\n        console.log(\"connection reconnect\");\n        sock = new SockJS(\"http://localhost:8080/ws-stomp\");\n        ws = Stomp.over(sock);\n      }, 10 * 1000);\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, \"\\uBC29\\uC81C : \", room), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, msgs.map(msg => /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 33\n    }\n  }, msg.sender, \" - \", msg.message))), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    onKeyUp: e => chat = e.target.value,\n    placeholder: \"\\uBA54\\uC138\\uC9C0 \\uBCF4\\uB0B4\\uAE30\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 106\n    }\n  }, \"\\uC785\\uB825\"));\n}\n\nexport default Chat;","map":{"version":3,"sources":["/Users/jy/Desktop/chatdemo-react/src/components/Chat.js"],"names":["React","useState","SockJS","Axios","Stomp","Chat","props","chat","msgs","setMsgs","room","setRoom","sock","ws","over","reconnect","sendMessage","send","JSON","stringify","type","roomId","sender","message","console","log","recvMessage","recv","connect","frame","subscribe","parse","body","e","setTimeout","map","msg","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport SockJS from 'sockjs-client'\nimport Axios from 'axios';\nimport Stomp from 'stompjs'\n\nfunction Chat(props){\n    \n    let chat\n\n    const [msgs, setMsgs] = useState([])\n    const [room, setRoom] = useState('')\n\n\n    \n    let sock = new SockJS(\"http://localhost:8080/ws-stomp\");\n    let ws = Stomp.over(sock);\n    var reconnect = 0;\n    \n    // Axios.get('http://localhost:8080/chat/room/'+props.roomId)\n    // .then(response => { \n    //     console.log(\"roomname : \" ,response.data.name)\n    //     setRoom(response.data.name) \n    // });\n    \n    const sendMessage = function() {\n        ws.send(\"http://localhost:8080/pub/chat/message\", {}, \n            JSON.stringify({type:'TALK', roomId:props.roomId, sender:props.sender, message:chat}));\n        console.log(123)\n        chat = ''\n        \n    }\n\n    const recvMessage = function(recv) {\n        setMsgs(...msgs, {\"type\":recv.type,\n        \"sender\":recv.type=='ENTER'?'[알림]':recv.sender, \"message\":recv.message})\n\n        console.log(\"msg : \",msgs)\n    }\n\n\n  \n       // pub/sub event\n    ws.connect({}, function(frame) {\n        ws.subscribe(\"http://localhost:8080/sub/chat/room/\"+props.roomId, function(message) {\n            var recv = JSON.parse(message.body);\n                recvMessage(recv);\n        });\n        ws.send(\"http://localhost:8080/pub/chat/message\", {}, JSON.stringify({type:'ENTER', roomId: props.roomId, sender: props.sender}));\n        }, function(e) {\n            if(reconnect++ <= 1) {\n                setTimeout(function() {\n                    console.log(\"connection reconnect\");\n                    sock = new SockJS(\"http://localhost:8080/ws-stomp\");\n                    ws = Stomp.over(sock);\n                },10*1000);\n              }\n        });\n\n    \n\n    return (\n        <div>\n            <h1>방제 : {room}</h1>\n            <ul>\n                {msgs.map(msg=> <li>{msg.sender} - {msg.message}</li>)}\n            </ul>\n            <input type=\"text\" name=\"name\" onKeyUp={(e) => chat = e.target.value} placeholder=\"메세지 보내기\"/><button onClick={sendMessage}>입력</button>\n        </div>\n    )\n}\n\nexport default Chat\n"]},"metadata":{},"sourceType":"module"}