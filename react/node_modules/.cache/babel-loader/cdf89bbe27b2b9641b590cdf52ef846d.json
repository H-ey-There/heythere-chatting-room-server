{"ast":null,"code":"import _toConsumableArray from\"/Users/jy/Desktop/chatdemo-react/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _classCallCheck from\"/Users/jy/Desktop/chatdemo-react/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/jy/Desktop/chatdemo-react/node_modules/@babel/runtime/helpers/esm/createClass\";import _createSuper from\"/Users/jy/Desktop/chatdemo-react/node_modules/@babel/runtime/helpers/esm/createSuper\";import _inherits from\"/Users/jy/Desktop/chatdemo-react/node_modules/@babel/runtime/helpers/esm/inherits\";import React from'react';import SockJsClient from\"react-stomp\";import UsernameGenerator from\"username-generator\";import Fetch from\"json-fetch\";import{TalkBox}from\"react-talk\";import randomstring from\"randomstring\";var Chat2=/*#__PURE__*/function(_React$Component){_inherits(Chat2,_React$Component);var _super=_createSuper(Chat2);function Chat2(props){var _this;_classCallCheck(this,Chat2);_this=_super.call(this,props);// randomUserId is used to emulate a unique user id for this demo usage\n_this.onMessageReceive=function(msg,topic){//alert(JSON.stringify(msg) + \" @ \" +  JSON.stringify(this.state.messages)+\" @ \" + JSON.stringify(topic));\n_this.setState(function(prevState){return{messages:[].concat(_toConsumableArray(prevState.messages),[msg])};});};_this.sendMessage=function(msg,selfMsg){try{var send_message={\"user\":selfMsg.author,\"message\":selfMsg.message};_this.clientRef.sendMessage(\"/app/message\",JSON.stringify(send_message));return true;}catch(e){return false;}};_this.randomUserName=UsernameGenerator.generateUsername(\"-\");_this.randomUserId=randomstring.generate();_this.sendURL=\"/message\";_this.state={clientConnected:false,messages:[]};return _this;}_createClass(Chat2,[{key:\"componentWillMount\",value:function componentWillMount(){var _this2=this;console.log(\"call history\");Fetch(\"/history\",{method:\"GET\"}).then(function(response){_this2.setState({messages:response.body});});}},{key:\"render\",value:function render(){var _this3=this;var wsSourceUrl=\"http://localhost:8080/chatting\";return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(TalkBox,{topic:\"/topic/public\",currentUserId:this.randomUserId,currentUser:this.randomUserName,messages:this.state.messages,onSendMessage:this.sendMessage,connected:this.state.clientConnected}),/*#__PURE__*/React.createElement(SockJsClient,{url:wsSourceUrl,topics:[\"/topic/public\"],onMessage:this.onMessageReceive,ref:function ref(client){_this3.clientRef=client;},onConnect:function onConnect(){_this3.setState({clientConnected:true});},onDisconnect:function onDisconnect(){_this3.setState({clientConnected:false});},debug:false,style:[{width:'100%',height:'100%'}]}));}}]);return Chat2;}(React.Component);export default Chat2;","map":{"version":3,"sources":["/Users/jy/Desktop/chatdemo-react/src/components/Chat2.js"],"names":["React","SockJsClient","UsernameGenerator","Fetch","TalkBox","randomstring","Chat2","props","onMessageReceive","msg","topic","setState","prevState","messages","sendMessage","selfMsg","send_message","author","message","clientRef","JSON","stringify","e","randomUserName","generateUsername","randomUserId","generate","sendURL","state","clientConnected","console","log","method","then","response","body","wsSourceUrl","client","width","height","Component"],"mappings":"ujBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,YAAP,KAAyB,aAAzB,CACA,MAAOC,CAAAA,iBAAP,KAA8B,oBAA9B,CACA,MAAOC,CAAAA,KAAP,KAAkB,YAAlB,CACA,OAASC,OAAT,KAAwB,YAAxB,CACA,MAAOC,CAAAA,YAAP,KAAwB,cAAxB,C,GAEMC,CAAAA,K,0GAEJ,eAAYC,KAAZ,CAAmB,uCACjB,uBAAMA,KAAN,EACA;AAFiB,MAanBC,gBAbmB,CAaA,SAACC,GAAD,CAAMC,KAAN,CAAgB,CACjC;AACA,MAAKC,QAAL,CAAc,SAAAC,SAAS,QAAK,CAC1BC,QAAQ,8BAAMD,SAAS,CAACC,QAAhB,GAA0BJ,GAA1B,EADkB,CAAL,EAAvB,EAGD,CAlBkB,OAoBnBK,WApBmB,CAoBL,SAACL,GAAD,CAAMM,OAAN,CAAkB,CAC9B,GAAI,CACF,GAAIC,CAAAA,YAAY,CAAG,CACjB,OAASD,OAAO,CAACE,MADA,CAEjB,UAAYF,OAAO,CAACG,OAFH,CAAnB,CAIA,MAAKC,SAAL,CAAeL,WAAf,CAA2B,cAA3B,CAA2CM,IAAI,CAACC,SAAL,CAAeL,YAAf,CAA3C,EACA,MAAO,KAAP,CACD,CAAC,MAAMM,CAAN,CAAS,CACT,MAAO,MAAP,CACD,CACF,CA/BkB,CAGjB,MAAKC,cAAL,CAAsBrB,iBAAiB,CAACsB,gBAAlB,CAAmC,GAAnC,CAAtB,CACA,MAAKC,YAAL,CAAoBpB,YAAY,CAACqB,QAAb,EAApB,CACA,MAAKC,OAAL,CAAe,UAAf,CACA,MAAKC,KAAL,CAAa,CACXC,eAAe,CAAG,KADP,CAEXhB,QAAQ,CAAG,EAFA,CAAb,CANiB,aAWlB,C,iFAsBoB,iBACnBiB,OAAO,CAACC,GAAR,CAAY,cAAZ,EACA5B,KAAK,CAAC,UAAD,CAAa,CAChB6B,MAAM,CAAE,KADQ,CAAb,CAAL,CAEGC,IAFH,CAEQ,SAACC,QAAD,CAAc,CACpB,MAAI,CAACvB,QAAL,CAAc,CAAEE,QAAQ,CAAEqB,QAAQ,CAACC,IAArB,CAAd,EACD,CAJD,EAKD,C,uCAEQ,iBACP,GAAMC,CAAAA,WAAW,CAAG,gCAApB,CACA,mBACE,4CACE,oBAAC,OAAD,EAAS,KAAK,CAAC,eAAf,CAA+B,aAAa,CAAG,KAAKX,YAApD,CACE,WAAW,CAAG,KAAKF,cADrB,CACsC,QAAQ,CAAG,KAAKK,KAAL,CAAWf,QAD5D,CAEE,aAAa,CAAG,KAAKC,WAFvB,CAEqC,SAAS,CAAG,KAAKc,KAAL,CAAWC,eAF5D,EADF,cAKE,oBAAC,YAAD,EAAc,GAAG,CAAGO,WAApB,CAAkC,MAAM,CAAE,CAAC,eAAD,CAA1C,CACE,SAAS,CAAG,KAAK5B,gBADnB,CACsC,GAAG,CAAG,aAAC6B,MAAD,CAAY,CAAE,MAAI,CAAClB,SAAL,CAAiBkB,MAAjB,CAAyB,CADnF,CAEE,SAAS,CAAG,oBAAM,CAAC,MAAI,CAAC1B,QAAL,CAAc,CAAEkB,eAAe,CAAE,IAAnB,CAAd,EAA0C,CAF/D,CAGE,YAAY,CAAG,uBAAM,CAAE,MAAI,CAAClB,QAAL,CAAc,CAAEkB,eAAe,CAAE,KAAnB,CAAd,EAA2C,CAHpE,CAIE,KAAK,CAAG,KAJV,CAIkB,KAAK,CAAE,CAAC,CAACS,KAAK,CAAC,MAAP,CAAeC,MAAM,CAAC,MAAtB,CAAD,CAJzB,EALF,CADF,CAaD,C,mBA3DiBvC,KAAK,CAACwC,S,EA8D1B,cAAelC,CAAAA,KAAf","sourcesContent":["import React from 'react';\nimport SockJsClient from \"react-stomp\";\nimport UsernameGenerator from \"username-generator\";\nimport Fetch from \"json-fetch\";\nimport { TalkBox } from \"react-talk\";\nimport randomstring from\"randomstring\";\n\nclass Chat2 extends React.Component {\n \n  constructor(props) {\n    super(props);\n    // randomUserId is used to emulate a unique user id for this demo usage\n    this.randomUserName = UsernameGenerator.generateUsername(\"-\");\n    this.randomUserId = randomstring.generate();\n    this.sendURL = \"/message\";\n    this.state = {\n      clientConnected : false,\n      messages : []\n    };\n    \n  }\n\n  onMessageReceive = (msg, topic) => {\n    //alert(JSON.stringify(msg) + \" @ \" +  JSON.stringify(this.state.messages)+\" @ \" + JSON.stringify(topic));\n    this.setState(prevState => ({\n      messages: [...prevState.messages, msg]\n    }));\n  }\n\n  sendMessage = (msg, selfMsg) => {\n    try {\n      var send_message = {\n        \"user\" : selfMsg.author,\n        \"message\" : selfMsg.message\n      }\n      this.clientRef.sendMessage(\"/app/message\", JSON.stringify(send_message));\n      return true;\n    } catch(e) {\n      return false;\n    }\n  }\n\n  componentWillMount() {\n    console.log(\"call history\");\n    Fetch(\"/history\", {\n      method: \"GET\"\n    }).then((response) => {\n      this.setState({ messages: response.body });\n    });\n  }\n\n  render() {\n    const wsSourceUrl = \"http://localhost:8080/chatting\";\n    return (\n      <div>\n        <TalkBox topic=\"/topic/public\" currentUserId={ this.randomUserId }\n          currentUser={ this.randomUserName } messages={ this.state.messages }\n          onSendMessage={ this.sendMessage } connected={ this.state.clientConnected }/>\n        \n        <SockJsClient url={ wsSourceUrl } topics={[\"/topic/public\"]}\n          onMessage={ this.onMessageReceive } ref={ (client) => { this.clientRef = client }}\n          onConnect={ () => {this.setState({ clientConnected: true }) } }\n          onDisconnect={ () => { this.setState({ clientConnected: false }) } }\n          debug={ false } style={[{width:'100%', height:'100%'}]}/>\n      </div>\n    );\n  }\n}\n\nexport default Chat2;\n"]},"metadata":{},"sourceType":"module"}