{"ast":null,"code":"var _jsxFileName = \"/Users/jy/Desktop/chatdemo-react/src/components/Chat.js\";\nimport React, { useState, useEffect } from 'react';\nimport Axios from 'axios';\nimport SockJsClient from 'react-stomp';\nimport { useRecoilValue } from 'recoil';\nimport { RoomId } from '../atoms';\n\nfunction Chat() {\n  const roomId = useRecoilValue(RoomId);\n  const [room, setRoom] = useState('');\n  const [user, setUser] = useState('Guest');\n  useEffect(() => {\n    setUser(prompt(\"이름을 입력하세요\"));\n  }, []);\n  useEffect(() => {\n    if (roomId !== '') {\n      Axios.get('http://localhost:8080/chat/room/' + roomId).then(res => {\n        console.log(\"res : \" + res.data);\n        setRoom(res.data);\n      });\n    }\n  }, [roomId]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, \"\\uBC29\\uC81C : \", room.name), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }, \"\\uB098 : \", user), /*#__PURE__*/React.createElement(SockJsClient, {\n    url: \"http://localhost:8080/ws-stomp\",\n    topics: ['/topics/all'],\n    onMessage: msg => {\n      console.log(msg);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default Chat; // var sock = new SockJS(\"/ws-stomp\");\n// var ws = Stomp.over(sock);\n// var reconnect = 0;\n// // vue.js\n// var vm = new Vue({\n//     el: '#app',\n//     data: {\n//         roomId: '',\n//         room: {},\n//         sender: '',\n//         message: '',\n//         messages: []\n//     },\n//     created() {\n//         this.roomId = localStorage.getItem('wschat.roomId');\n//         this.sender = localStorage.getItem('wschat.sender');\n//         this.findRoom();\n//     },\n//     methods: {\n//         sendMessage: function() {\n//             ws.send(\"/pub/chat/message\", {}, JSON.stringify({type:'TALK', roomId:this.roomId, sender:this.sender, message:this.message}));\n//             this.message = '';\n//         },\n//         recvMessage: function(recv) {\n//             this.messages.unshift({\"type\":recv.type,\"sender\":recv.type=='ENTER'?'[알림]':recv.sender,\"message\":recv.message})\n//         }\n//     }\n// });\n// function connect() {\n//     // pub/sub event\n//     ws.connect({}, function(frame) {\n//         ws.subscribe(\"/sub/chat/room/\"+vm.$data.roomId, function(message) {\n//             var recv = JSON.parse(message.body);\n//             vm.recvMessage(recv);\n//         });\n//         ws.send(\"/pub/chat/message\", {}, JSON.stringify({type:'ENTER', roomId:vm.$data.roomId, sender:vm.$data.sender}));\n//     }, function(error) {\n//         if(reconnect++ <= 5) {\n//             setTimeout(function() {\n//                 console.log(\"connection reconnect\");\n//                 sock = new SockJS(\"/ws-stomp\");\n//                 ws = Stomp.over(sock);\n//                 connect();\n//             },10*1000);\n//         }\n//     });\n// }\n// connect();","map":{"version":3,"sources":["/Users/jy/Desktop/chatdemo-react/src/components/Chat.js"],"names":["React","useState","useEffect","Axios","SockJsClient","useRecoilValue","RoomId","Chat","roomId","room","setRoom","user","setUser","prompt","get","then","res","console","log","data","name","msg"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,aAAzB;AACA,SAASC,cAAT,QAA+B,QAA/B;AACA,SAAQC,MAAR,QAAqB,UAArB;;AAEA,SAASC,IAAT,GAAe;AAEX,QAAMC,MAAM,GAAGH,cAAc,CAACC,MAAD,CAA7B;AACA,QAAM,CAACG,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,OAAD,CAAhC;AACAC,EAAAA,SAAS,CAAC,MAAI;AACTU,IAAAA,OAAO,CAACC,MAAM,CAAC,WAAD,CAAP,CAAP;AACJ,GAFQ,EAEP,EAFO,CAAT;AAIAX,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIM,MAAM,KAAK,EAAf,EAAkB;AACdL,MAAAA,KAAK,CAACW,GAAN,CAAU,qCAAmCN,MAA7C,EACCO,IADD,CACMC,GAAG,IAAG;AACRC,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAWF,GAAG,CAACG,IAA3B;AACAT,QAAAA,OAAO,CAACM,GAAG,CAACG,IAAL,CAAP;AACH,OAJD;AAKH;AACJ,GARQ,EAQP,CAACX,MAAD,CARO,CAAT;AAWA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAUC,IAAI,CAACW,IAAf,CADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAST,IAAT,CAFJ,eAGI,oBAAC,YAAD;AACI,IAAA,GAAG,EAAC,gCADR;AAEI,IAAA,MAAM,EAAE,CAAC,aAAD,CAFZ;AAGI,IAAA,SAAS,EAAGU,GAAD,IAAS;AAAEJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,GAAZ;AAAmB,KAH7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CADJ;AAUH;;AAGD,eAAed,IAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState, useEffect} from 'react'\nimport Axios from 'axios';\nimport SockJsClient from 'react-stomp';\nimport { useRecoilValue } from 'recoil';\nimport {RoomId} from '../atoms'\n\nfunction Chat(){\n    \n    const roomId = useRecoilValue(RoomId)\n    const [room, setRoom] = useState('')\n    const [user, setUser] = useState('Guest')\n    useEffect(()=>{\n         setUser(prompt(\"이름을 입력하세요\"))\n    },[])\n\n    useEffect(() => {\n        if (roomId !== ''){\n            Axios.get('http://localhost:8080/chat/room/'+roomId)\n            .then(res=> { \n                console.log(\"res : \" + res.data)\n                setRoom(res.data) \n            });\n        }\n    },[roomId])\n\n    \n    return (\n        <div> \n            <h1>방제 : {room.name}</h1>\n            <h2>나 : {user}</h2>\n            <SockJsClient\n                url='http://localhost:8080/ws-stomp' \n                topics={['/topics/all']}\n                onMessage={(msg) => { console.log(msg); }} />\n        </div>\n    )\n}\n\n\nexport default Chat\n\n// var sock = new SockJS(\"/ws-stomp\");\n// var ws = Stomp.over(sock);\n// var reconnect = 0;\n// // vue.js\n// var vm = new Vue({\n//     el: '#app',\n//     data: {\n//         roomId: '',\n//         room: {},\n//         sender: '',\n//         message: '',\n//         messages: []\n//     },\n//     created() {\n//         this.roomId = localStorage.getItem('wschat.roomId');\n//         this.sender = localStorage.getItem('wschat.sender');\n//         this.findRoom();\n//     },\n//     methods: {\n//         sendMessage: function() {\n//             ws.send(\"/pub/chat/message\", {}, JSON.stringify({type:'TALK', roomId:this.roomId, sender:this.sender, message:this.message}));\n//             this.message = '';\n//         },\n//         recvMessage: function(recv) {\n//             this.messages.unshift({\"type\":recv.type,\"sender\":recv.type=='ENTER'?'[알림]':recv.sender,\"message\":recv.message})\n//         }\n//     }\n// });\n\n// function connect() {\n//     // pub/sub event\n//     ws.connect({}, function(frame) {\n//         ws.subscribe(\"/sub/chat/room/\"+vm.$data.roomId, function(message) {\n//             var recv = JSON.parse(message.body);\n//             vm.recvMessage(recv);\n//         });\n//         ws.send(\"/pub/chat/message\", {}, JSON.stringify({type:'ENTER', roomId:vm.$data.roomId, sender:vm.$data.sender}));\n//     }, function(error) {\n//         if(reconnect++ <= 5) {\n//             setTimeout(function() {\n//                 console.log(\"connection reconnect\");\n//                 sock = new SockJS(\"/ws-stomp\");\n//                 ws = Stomp.over(sock);\n//                 connect();\n//             },10*1000);\n//         }\n//     });\n// }\n// connect();\n\n\n"]},"metadata":{},"sourceType":"module"}