{"ast":null,"code":"var _jsxFileName = \"/Users/jy/Desktop/heythere2/heythere-chattingroom-server/chatdemo-react/src/components/Room.js\";\nimport Axios from 'axios';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useSetRecoilState } from 'recoil';\nimport { RoomId, Sender } from '../atoms';\nimport SockJsClient from 'react-stomp';\nconst GET_ROOM_URL = 'http://localhost:8080/chat/rooms';\n\nfunction Room() {\n  const $websocket = useRef(null);\n  const [sender, setSender] = useRecoilState(Sender);\n  const [roomList, setRoomList] = useState([]);\n  const [roomName, setRoomName] = useState('');\n  const setRoomId = useSetRecoilState(RoomId);\n\n  const fetchData = async () => {\n    const response = await Axios.get(GET_ROOM_URL);\n    setRoomList(response.data.map(room => /*#__PURE__*/React.createElement(\"li\", {\n      key: room.roomId,\n      onClick: () => setRoomId(room.roomId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }\n    }, room.name))); // 데이터는 response.data 안에 들어있습니다.\n  };\n\n  useEffect(() => {\n    console.log(\"get room in room\");\n    fetchData();\n  }, []);\n\n  const onChange = e => {\n    setRoomName(e.target.value);\n  };\n\n  const createRoom = () => {\n    if (roomName === '') {\n      alert('이름을 입력하세요!');\n      return;\n    }\n\n    $websocket.current.sendMessage(\"/pub/room\", JSON.stringify({\n      name: roomName\n    }), {\n      'Content-Type': 'application/json'\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, \"Hey, there!\"), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, \" \\uBC29 \\uC81C\\uBAA9 : \\xA0\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    onKeyUp: onChange,\n    placeholder: \"\\uC5EC\\uAE30\\uC5D0 \\uBC29\\uC81C\\uB97C \\uC785\\uB825\",\n    onKeyPress: e => {\n      if (e.key === \"Enter\") {\n        createRoom();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: createRoom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }, \"\\uAC1C\\uC124\")), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, roomList), /*#__PURE__*/React.createElement(SockJsClient, {\n    url: \"http://localhost:8080/ws-stomp\",\n    topics: ['/sub/room/'],\n    onMessage: msg => {\n      setRoomId(msg);\n      fetchData();\n    },\n    ref: $websocket,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default Room;","map":{"version":3,"sources":["/Users/jy/Desktop/heythere2/heythere-chattingroom-server/chatdemo-react/src/components/Room.js"],"names":["Axios","React","useState","useEffect","useRef","useSetRecoilState","RoomId","Sender","SockJsClient","GET_ROOM_URL","Room","$websocket","sender","setSender","useRecoilState","roomList","setRoomList","roomName","setRoomName","setRoomId","fetchData","response","get","data","map","room","roomId","name","console","log","onChange","e","target","value","createRoom","alert","current","sendMessage","JSON","stringify","key","msg"],"mappings":"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","sourcesContent":["import Axios from 'axios';\nimport React, {useState, useEffect, useRef} from 'react';\nimport {useSetRecoilState} from 'recoil';\nimport {RoomId, Sender} from '../atoms'\nimport SockJsClient from 'react-stomp'\n\nconst GET_ROOM_URL = 'http://localhost:8080/chat/rooms'\n\nfunction Room() {\n    const $websocket = useRef(null)\n\n    const [sender, setSender] = useRecoilState(Sender)\n    const [roomList, setRoomList] = useState([])\n    const [roomName, setRoomName] = useState('')\n    const setRoomId = useSetRecoilState(RoomId)\n\n    const fetchData = async () => {\n        const response = await Axios.get(GET_ROOM_URL);\n        setRoomList(\n            response.data.map(room =>\n                <li key={room.roomId}\n                    onClick={() => setRoomId(room.roomId)}>\n                    {room.name}\n                </li>)); // 데이터는 response.data 안에 들어있습니다.\n    };\n\n    useEffect(() => {\n        console.log(\"get room in room\")\n        fetchData();\n    }, []);\n\n    const onChange = (e) => {\n        setRoomName(e.target.value);\n    };\n\n    const createRoom = () => {\n\n        if (roomName === '') {\n            alert('이름을 입력하세요!')\n            return\n        }\n\n        $websocket.current.sendMessage(\n            \"/pub/room\",\n            JSON.stringify({name: roomName}),\n            {'Content-Type': 'application/json'})\n    }\n\n    return (\n        <div>\n            <h1>Hey, there!</h1>\n            <label> 방 제목 : &nbsp;\n                <input type=\"text\" name=\"name\" onKeyUp={onChange} placeholder=\"여기에 방제를 입력\" onKeyPress={e => {\n                    if (e.key === \"Enter\") {\n                        createRoom()\n                    }\n                }}/>\n                <button onClick={createRoom}>개설</button>\n            </label>\n            <ul>\n                {roomList}\n            </ul>\n            <SockJsClient\n                url=\"http://localhost:8080/ws-stomp\"\n                topics={['/sub/room/']}\n                onMessage={\n                    (msg) => {\n                        setRoomId(msg)\n                        fetchData()\n                    }\n                }\n                ref={$websocket}/>\n        </div>\n    );\n}\n\nexport default Room\n"]},"metadata":{},"sourceType":"module"}