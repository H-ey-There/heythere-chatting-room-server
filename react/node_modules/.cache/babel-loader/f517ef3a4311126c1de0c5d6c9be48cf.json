{"ast":null,"code":"var _jsxFileName = \"/Users/jy/Desktop/chatdemo-react/src/components/Chat2.js\";\nimport React, { useEffect, useState } from 'react';\nimport SockJsClient from \"react-stomp\";\nimport Fetch from \"json-fetch\";\nimport { TalkBox } from \"react-talk\";\nimport randomstring from \"randomstring\";\nimport { useRecoilValue } from 'recoil';\nimport { RoomId } from '../atoms';\nimport Axios from 'axios';\n\nfunction Chat2() {\n  const roomId = useRecoilValue(RoomId);\n  const [room, setRoom] = useState('');\n  const randomUserName = \"Guest\";\n  const randomUserId = randomstring.generate();\n  const sendURL = \"/message\";\n  const [status, setStatus] = useState({\n    clientConnected: false,\n    messages: []\n  });\n  useEffect(() => {\n    console.log(\"call history\");\n    Fetch(\"/history\", {\n      method: \"GET\"\n    }).then(response => {\n      setStatus({\n        messages: response.body\n      });\n    });\n\n    if (roomId !== '') {\n      Axios.get(`http://localhost:8080/chat/room/${roomId}`).then(res => {\n        setRoom(res.data);\n      });\n    }\n  }, [roomId]);\n\n  const onMessageReceive = (msg, topic) => {\n    //alert(JSON.stringify(msg) + \" @ \" +  JSON.stringify(this.state.messages)+\" @ \" + JSON.stringify(topic));\n    this.setState(prevState => ({\n      messages: [...prevState.messages, msg]\n    }));\n  };\n\n  const sendMessage = (msg, selfMsg) => {\n    try {\n      var send_message = {\n        \"user\": selfMsg.author,\n        \"message\": selfMsg.message\n      };\n      this.clientRef.sendMessage(\"/app/message\", JSON.stringify(send_message));\n      return true;\n    } catch (e) {\n      return false;\n    }\n  };\n\n  const wsSourceUrl = \"http://localhost:8080/ws-stomp\";\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TalkBox, {\n    topic: `/sub/${room.name}`,\n    currentUserId: randomUserId,\n    currentUser: randomUserName,\n    messages: [],\n    onSendMessage: sendMessage,\n    connected: status.clientConnected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(SockJsClient, {\n    url: wsSourceUrl,\n    topics: [`{/sub/${roomId}}`],\n    onMessage: onMessageReceive //   ref={ (client) => { clientRef = client }}\n    ,\n    onConnect: () => {\n      setStatus({\n        clientConnected: true\n      });\n    },\n    onDisconnect: () => {\n      setStatus({\n        clientConnected: false\n      });\n    },\n    debug: false,\n    style: [{\n      width: '100%',\n      height: '100%'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default Chat2;","map":{"version":3,"sources":["/Users/jy/Desktop/chatdemo-react/src/components/Chat2.js"],"names":["React","useEffect","useState","SockJsClient","Fetch","TalkBox","randomstring","useRecoilValue","RoomId","Axios","Chat2","roomId","room","setRoom","randomUserName","randomUserId","generate","sendURL","status","setStatus","clientConnected","messages","console","log","method","then","response","body","get","res","data","onMessageReceive","msg","topic","setState","prevState","sendMessage","selfMsg","send_message","author","message","clientRef","JSON","stringify","e","wsSourceUrl","name","width","height"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport SockJsClient from \"react-stomp\";\nimport Fetch from \"json-fetch\";\nimport { TalkBox } from \"react-talk\";\nimport randomstring from\"randomstring\";\nimport {useRecoilValue } from 'recoil';\nimport { RoomId } from '../atoms';\nimport Axios from 'axios';\n\n\nfunction Chat2() {\n\n    const roomId = useRecoilValue(RoomId)\n    const [room, setRoom] = useState('')\n    const randomUserName = \"Guest\"\n    const randomUserId = randomstring.generate();\n    const sendURL = \"/message\";\n    const [status, setStatus] = useState(      \n        {\n            clientConnected : false,\n            messages : []\n        })\n\n  useEffect(() => {\n    console.log(\"call history\");\n    Fetch(\"/history\", {\n      method: \"GET\"\n    }).then((response) => {\n      setStatus({ messages: response.body });\n    });\n    if (roomId !== ''){\n        Axios.get(`http://localhost:8080/chat/room/${roomId}`)\n        .then(res=> { \n            setRoom(res.data) \n        });\n    }\n  }, [roomId])\n\n  const onMessageReceive = (msg, topic) => {\n    //alert(JSON.stringify(msg) + \" @ \" +  JSON.stringify(this.state.messages)+\" @ \" + JSON.stringify(topic));\n    this.setState(prevState => ({\n      messages: [...prevState.messages, msg]\n    }));\n  }\n\n  const sendMessage = (msg, selfMsg) => {\n    try {\n      var send_message = {\n        \"user\" : selfMsg.author,\n        \"message\" : selfMsg.message\n      }\n      this.clientRef.sendMessage(\"/app/message\", JSON.stringify(send_message));\n      return true;\n    } catch(e) {\n      return false;\n    }\n  }\n    const wsSourceUrl = \"http://localhost:8080/ws-stomp\";\n    return (\n      <div>\n        <TalkBox topic={`/sub/${room.name}`} currentUserId={ randomUserId }\n          currentUser={randomUserName } messages={ [] }\n          onSendMessage={ sendMessage } connected={ status.clientConnected }/>\n        \n        <SockJsClient url={ wsSourceUrl } topics={[`{/sub/${roomId}}`]}\n          onMessage={ onMessageReceive } \n        //   ref={ (client) => { clientRef = client }}\n          onConnect={ () => {setStatus({ clientConnected: true }) } }\n          onDisconnect={ () => {setStatus({ clientConnected: false }) } }\n          debug={ false } style={[{width:'100%', height:'100%'}]}/>\n      </div>\n    );\n  \n}\n\nexport default Chat2;\n"]},"metadata":{},"sourceType":"module"}